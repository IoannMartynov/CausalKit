{
 "cells": [
  {
   "metadata": {
    "collapsed": true
   },
   "cell_type": "markdown",
   "source": "# Scenario 1",
   "id": "8fcc272d63fa7879"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "| Is RCT        | Treatment | Outcome    | EDA | Estimands | Refutation | Docs, Examples | Synthetic tests |\n",
    "|---------------|-----------|------------|-----|-----------|------------|----------------|-----------------|\n",
    "| Observational | Binary    | Continuous | No  | No        | No         | No             | No              |"
   ],
   "id": "a636362b8fad6e7b"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "## Generate data",
   "id": "889d566926f81af1"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:09.556154Z",
     "start_time": "2025-08-16T14:59:09.500564Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from causalkit.data import CausalDatasetGenerator, CausalData\n",
    "\n",
    "# Reproducibility\n",
    "np.random.seed(42)\n",
    "\n",
    "confounder_specs = [\n",
    "    {\"name\": \"tenure_months\", \"dist\": \"normal\", \"mu\": 24, \"sd\": 12},\n",
    "    {\"name\": \"avg_sessions_week\", \"dist\": \"normal\", \"mu\": 5, \"sd\": 2},\n",
    "    {\"name\": \"spend_last_month\", \"dist\": \"uniform\", \"a\": 0, \"b\": 200},\n",
    "    {\"name\": \"premium_user\", \"dist\": \"bernoulli\", \"p\": 0.25},\n",
    "    {\"name\": \"urban_resident\", \"dist\": \"bernoulli\", \"p\": 0.60},\n",
    "]\n",
    "\n",
    "# Causal effect and noise\n",
    "theta = 1.8  # ATE: +1.8 ARPU units if new_feature = 1\n",
    "sigma_y = 3.5  # ARPU noise std\n",
    "target_t_rate = 0.35  # ~35% treated\n",
    "\n",
    "# Effects of confounders on ARPU (baseline, additive)\n",
    "# Order: tenure_months, avg_sessions_week, spend_last_month, premium_user, urban_resident\n",
    "beta_y = np.array([\n",
    "    0.05,  # tenure_months: small positive effect\n",
    "    0.40,  # avg_sessions_week: strong positive effect\n",
    "    0.02,  # spend_last_month: recent spend correlates with ARPU\n",
    "    2.00,  # premium_user: premium users have higher ARPU\n",
    "    1.00,  # urban_resident: urban users slightly higher ARPU\n",
    "], dtype=float)\n",
    "\n",
    "# Effects of confounders on treatment assignment (log-odds scale)\n",
    "beta_t = np.array([\n",
    "    0.015,  # tenure_months\n",
    "    0.10,  # avg_sessions_week\n",
    "    0.002,  # spend_last_month\n",
    "    0.75,  # premium_user\n",
    "    0.30,  # urban_resident: more likely to get the feature\n",
    "], dtype=float)\n",
    "\n",
    "gen = CausalDatasetGenerator(\n",
    "    theta=theta,\n",
    "    outcome_type=\"continuous\",\n",
    "    sigma_y=sigma_y,\n",
    "    target_t_rate=target_t_rate,\n",
    "    seed=42,\n",
    "    confounder_specs=confounder_specs,\n",
    "    beta_y=beta_y,\n",
    "    beta_t=beta_t,\n",
    ")\n",
    "\n",
    "\n",
    "# Create dataset\n",
    "causal_data = gen.to_causal_data(\n",
    "    n=50000,\n",
    "    cofounders = [\n",
    "    \"tenure_months\",\n",
    "    \"avg_sessions_week\",\n",
    "    \"spend_last_month\",\n",
    "    \"premium_user\",\n",
    "    \"urban_resident\",\n",
    "]\n",
    ")\n",
    "\n",
    "# Show first few rows\n",
    "causal_data.df.head()\n"
   ],
   "id": "5df3d791f8395962",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "           y    t  tenure_months  avg_sessions_week  spend_last_month  \\\n",
       "0  12.566029  1.0      27.656605           6.539360         93.076228   \n",
       "1   8.264386  0.0      11.520191           1.312189        196.416592   \n",
       "2   3.866827  1.0      33.005414           4.520685        198.394828   \n",
       "3  10.911837  1.0      35.286777           2.818728        190.849070   \n",
       "4   4.487900  0.0       0.587578          10.727306        191.055115   \n",
       "\n",
       "   premium_user  urban_resident  \n",
       "0           0.0             1.0  \n",
       "1           0.0             1.0  \n",
       "2           0.0             1.0  \n",
       "3           0.0             1.0  \n",
       "4           0.0             0.0  "
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y</th>\n",
       "      <th>t</th>\n",
       "      <th>tenure_months</th>\n",
       "      <th>avg_sessions_week</th>\n",
       "      <th>spend_last_month</th>\n",
       "      <th>premium_user</th>\n",
       "      <th>urban_resident</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12.566029</td>\n",
       "      <td>1.0</td>\n",
       "      <td>27.656605</td>\n",
       "      <td>6.539360</td>\n",
       "      <td>93.076228</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8.264386</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.520191</td>\n",
       "      <td>1.312189</td>\n",
       "      <td>196.416592</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.866827</td>\n",
       "      <td>1.0</td>\n",
       "      <td>33.005414</td>\n",
       "      <td>4.520685</td>\n",
       "      <td>198.394828</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10.911837</td>\n",
       "      <td>1.0</td>\n",
       "      <td>35.286777</td>\n",
       "      <td>2.818728</td>\n",
       "      <td>190.849070</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.487900</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.587578</td>\n",
       "      <td>10.727306</td>\n",
       "      <td>191.055115</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 24
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "## EDA\n",
   "id": "5e37434a3725215a"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:09.585927Z",
     "start_time": "2025-08-16T14:59:09.582488Z"
    }
   },
   "cell_type": "code",
   "source": [
    "from causalkit.eda import CausalEDA\n",
    "eda = CausalEDA(causal_data)"
   ],
   "id": "afd5e60494139b52",
   "outputs": [],
   "execution_count": 25
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "### General",
   "id": "d1f80850070fb4bb"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:09.638617Z",
     "start_time": "2025-08-16T14:59:09.636063Z"
    }
   },
   "cell_type": "code",
   "source": "eda.data_shape()",
   "id": "42b71d7670c08369",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'n_rows': 50000, 'n_columns': 7}"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 26
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:09.693475Z",
     "start_time": "2025-08-16T14:59:09.674286Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 1) Comprehensive outcome statistics by treatment\n",
    "# Provides detailed statistics including count, mean, std, min, percentiles, and max\n",
    "eda.outcome_stats()\n",
    "\n"
   ],
   "id": "fddea7b8fd105fd6",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "           count      mean       std        min       p10       p25    median  \\\n",
       "treatment                                                                       \n",
       "0.0        32599  6.030044  3.927121 -10.036046  1.021363  3.409317  6.016423   \n",
       "1.0        17401  8.545813  3.971549  -6.248371  3.436976  5.852603  8.542448   \n",
       "\n",
       "                 p75        p90        max  \n",
       "treatment                                   \n",
       "0.0         8.654023  11.085462  22.216914  \n",
       "1.0        11.223197  13.631587  24.516679  "
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>p10</th>\n",
       "      <th>p25</th>\n",
       "      <th>median</th>\n",
       "      <th>p75</th>\n",
       "      <th>p90</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>treatment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>32599</td>\n",
       "      <td>6.030044</td>\n",
       "      <td>3.927121</td>\n",
       "      <td>-10.036046</td>\n",
       "      <td>1.021363</td>\n",
       "      <td>3.409317</td>\n",
       "      <td>6.016423</td>\n",
       "      <td>8.654023</td>\n",
       "      <td>11.085462</td>\n",
       "      <td>22.216914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>17401</td>\n",
       "      <td>8.545813</td>\n",
       "      <td>3.971549</td>\n",
       "      <td>-6.248371</td>\n",
       "      <td>3.436976</td>\n",
       "      <td>5.852603</td>\n",
       "      <td>8.542448</td>\n",
       "      <td>11.223197</td>\n",
       "      <td>13.631587</td>\n",
       "      <td>24.516679</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 27
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:09.810282Z",
     "start_time": "2025-08-16T14:59:09.714932Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 2) Outcome distribution by treatment (hist + boxplot) - using new outcome_plots() method\n",
    "fig1, fig2 = eda.outcome_plots()\n",
    "plt.show()"
   ],
   "id": "880b0a5072b4df9b",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 700x400 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 700x400 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 28
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "### Confounders",
   "id": "f2e00d21f202152e"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:27.481458Z",
     "start_time": "2025-08-16T14:59:09.835379Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Shows means for control/treated groups, absolute differences, and SMD values\n",
    "confounders_balance_df = eda.confounders_means()\n",
    "display(confounders_balance_df)\n",
    "\n",
    "# NEW: PropensityModel - fit_propensity() now returns a PropensityModel with built-in methods\n",
    "# The PropensityModel encapsulates propensity scores and provides diagnostic methods\n",
    "ps_model = eda.fit_propensity()\n",
    "\n",
    "# 1) ROC AUC - shows how predictable treatment is from confounders\n",
    "roc_auc_score = ps_model.roc_auc\n",
    "print(\"ROC AUC from PropensityModel:\", round(roc_auc_score, 4))\n",
    "\n",
    "# 2) Positivity check - assess overlap between treatment groups\n",
    "positivity_result = ps_model.positivity_check()\n",
    "print(\"Positivity check from PropensityModel:\", positivity_result)\n",
    "\n",
    "shap_values_df = ps_model.shap\n",
    "display(shap_values_df)\n",
    "\n",
    "ps_model.ps_graph()\n",
    "plt.show()"
   ],
   "id": "370ce9b4dfabf136",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "                    mean_t_0    mean_t_1  abs_diff       smd\n",
       "confounders                                                 \n",
       "premium_user        0.199485    0.342509  0.143024  0.326023\n",
       "avg_sessions_week   4.854119    5.227690  0.373571  0.186733\n",
       "tenure_months      23.294194   25.303966  2.009772  0.167721\n",
       "urban_resident      0.573116    0.637032  0.063917  0.131030\n",
       "spend_last_month   97.853328  103.457644  5.604315  0.097330"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_t_0</th>\n",
       "      <th>mean_t_1</th>\n",
       "      <th>abs_diff</th>\n",
       "      <th>smd</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>confounders</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>premium_user</th>\n",
       "      <td>0.199485</td>\n",
       "      <td>0.342509</td>\n",
       "      <td>0.143024</td>\n",
       "      <td>0.326023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>avg_sessions_week</th>\n",
       "      <td>4.854119</td>\n",
       "      <td>5.227690</td>\n",
       "      <td>0.373571</td>\n",
       "      <td>0.186733</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tenure_months</th>\n",
       "      <td>23.294194</td>\n",
       "      <td>25.303966</td>\n",
       "      <td>2.009772</td>\n",
       "      <td>0.167721</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>urban_resident</th>\n",
       "      <td>0.573116</td>\n",
       "      <td>0.637032</td>\n",
       "      <td>0.063917</td>\n",
       "      <td>0.131030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>spend_last_month</th>\n",
       "      <td>97.853328</td>\n",
       "      <td>103.457644</td>\n",
       "      <td>5.604315</td>\n",
       "      <td>0.097330</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC from PropensityModel: 0.6121\n",
      "Positivity check from PropensityModel: {'bounds': (0.05, 0.95), 'share_below': 0.00096, 'share_above': 0.0, 'flag': False}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "             feature  shap_mean\n",
       "0      tenure_months   0.000326\n",
       "1  avg_sessions_week  -0.000279\n",
       "2   spend_last_month  -0.000148\n",
       "3       premium_user   0.000056\n",
       "4     urban_resident   0.000045"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>shap_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tenure_months</td>\n",
       "      <td>0.000326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>avg_sessions_week</td>\n",
       "      <td>-0.000279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>spend_last_month</td>\n",
       "      <td>-0.000148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>premium_user</td>\n",
       "      <td>0.000056</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>urban_resident</td>\n",
       "      <td>0.000045</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 29
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "### Outcome",
   "id": "735d2a5a60aa75be"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:36.191124Z",
     "start_time": "2025-08-16T14:59:27.498891Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# The OutcomeModel encapsulates outcome predictions and provides diagnostic methods\n",
    "outcome_model = eda.outcome_fit()\n",
    "\n",
    "# 1) Regression scores - shows how well we can predict the outcome from confounders only\n",
    "print(outcome_model.scores)\n",
    "\n",
    "\n",
    "# 2) SHAP values - feature importance for outcome prediction from confounders\n",
    "shap_outcome_df = outcome_model.shap\n",
    "display(shap_outcome_df)"
   ],
   "id": "552711b4aaa3715f",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'rmse': 3.6348456765609427, 'mae': 2.893847375791019}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "             feature  shap_mean\n",
       "0  avg_sessions_week   0.000649\n",
       "1      tenure_months  -0.000342\n",
       "2   spend_last_month  -0.000305\n",
       "3       premium_user  -0.000061\n",
       "4     urban_resident   0.000059"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>shap_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>avg_sessions_week</td>\n",
       "      <td>0.000649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>tenure_months</td>\n",
       "      <td>-0.000342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>spend_last_month</td>\n",
       "      <td>-0.000305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>premium_user</td>\n",
       "      <td>-0.000061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>urban_resident</td>\n",
       "      <td>0.000059</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 30
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "## Inference",
   "id": "6bb04960515eddb9"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:37.279221Z",
     "start_time": "2025-08-16T14:59:36.245335Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Import inference methods\n",
    "from causalkit.inference.ate import dml_ate\n",
    "from causalkit.inference.att import dml_att\n",
    "\n",
    "# Estimate Average Treatment Effect (ATE)\n",
    "ate_result = dml_ate(causal_data, n_folds=3, confidence_level=0.95)"
   ],
   "id": "1903be665fae92e5",
   "outputs": [],
   "execution_count": 31
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:37.295353Z",
     "start_time": "2025-08-16T14:59:37.293218Z"
    }
   },
   "cell_type": "code",
   "source": "ate_result",
   "id": "c6d73ec082c0aa5b",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'coefficient': np.float64(1.8047837219688228),\n",
       " 'std_error': np.float64(0.03568165113834074),\n",
       " 'p_value': np.float64(0.0),\n",
       " 'confidence_interval': (np.float64(1.7348489708287522),\n",
       "  np.float64(1.8747184731088933)),\n",
       " 'model': <doubleml.irm.irm.DoubleMLIRM at 0x12b16f890>}"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 32
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "## Refutation",
   "id": "d480fb40315a1482"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:37.304537Z",
     "start_time": "2025-08-16T14:59:37.302912Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Import refutation utilities\n",
    "from causalkit.refutation import (\n",
    "    refute_placebo_outcome,\n",
    "    refute_placebo_treatment,\n",
    "    refute_subset,\n",
    "    refute_irm_orthogonality,\n",
    ")\n"
   ],
   "id": "b1ea9f3ac405ad32",
   "outputs": [],
   "execution_count": 33
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:39.118962Z",
     "start_time": "2025-08-16T14:59:37.317150Z"
    }
   },
   "cell_type": "code",
   "source": [
    "print(\"--- Placebo Outcome Test ---\")\n",
    "print(\"Shuffling outcome variable (breaking outcome-treatment link)\")\n",
    "print(\"Expected: θ ≈ 0, large p-value\\n\")\n",
    "\n",
    "# Test with ATE estimator\n",
    "ate_placebo_outcome = refute_placebo_outcome(\n",
    "    dml_ate,\n",
    "    causal_data,\n",
    "    random_state=42\n",
    ")\n",
    "\n",
    "print(f\"ATE with shuffled outcome:\")\n",
    "print(f\"  θ = {ate_placebo_outcome['theta']:.4f}\")\n",
    "print(f\"  p-value = {ate_placebo_outcome['p_value']:.4f}\")\n",
    "\n"
   ],
   "id": "eb5f75c616754927",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Placebo Outcome Test ---\n",
      "Shuffling outcome variable (breaking outcome-treatment link)\n",
      "Expected: θ ≈ 0, large p-value\n",
      "\n",
      "ATE with shuffled outcome:\n",
      "  θ = 0.0014\n",
      "  p-value = 0.4878\n"
     ]
    }
   ],
   "execution_count": 34
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:40.922313Z",
     "start_time": "2025-08-16T14:59:39.134487Z"
    }
   },
   "cell_type": "code",
   "source": [
    "print(\"\\n--- Placebo Treatment Test ---\")\n",
    "print(\"Shuffling treatment variable (breaking treatment-outcome link)\")\n",
    "print(\"Expected: θ ≈ 0, large p-value\\n\")\n",
    "\n",
    "# Test with ATE estimator\n",
    "ate_placebo_treatment = refute_placebo_treatment(\n",
    "    dml_ate,\n",
    "    causal_data,\n",
    "    random_state=42\n",
    ")\n",
    "\n",
    "print(f\"ATE with shuffled treatment:\")\n",
    "print(f\"  θ = {ate_placebo_treatment['theta']:.4f}\")\n",
    "print(f\"  p-value = {ate_placebo_treatment['p_value']:.4f}\")"
   ],
   "id": "fcde73df6227ef75",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Placebo Treatment Test ---\n",
      "Shuffling treatment variable (breaking treatment-outcome link)\n",
      "Expected: θ ≈ 0, large p-value\n",
      "\n",
      "ATE with shuffled treatment:\n",
      "  θ = -0.0449\n",
      "  p-value = 0.1963\n"
     ]
    }
   ],
   "execution_count": 35
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:45.491177Z",
     "start_time": "2025-08-16T14:59:40.936152Z"
    }
   },
   "cell_type": "code",
   "source": [
    "print(\"\\n--- Subset Robustness Test ---\")\n",
    "print(\"Testing stability on random subsets of data\")\n",
    "print(\"Expected: θ similar to original estimate\\n\")\n",
    "\n",
    "# Test multiple subset sizes\n",
    "subset_fractions = [0.6, 0.8, 0.9]\n",
    "\n",
    "print(\"ATE Subset Tests:\")\n",
    "print(f\"Original ATE: {ate_result['coefficient']:.4f}\")\n",
    "\n",
    "ate_subset_results = []\n",
    "for fraction in subset_fractions:\n",
    "    subset_result = refute_subset(\n",
    "        dml_ate,\n",
    "        causal_data,\n",
    "        fraction=fraction,\n",
    "        random_state=42\n",
    "    )\n",
    "    ate_subset_results.append(subset_result)\n",
    "\n",
    "    print(f\"  {fraction*100:.0f}% subset: θ = {subset_result['theta']:.4f}, p = {subset_result['p_value']:.4f}\")\n"
   ],
   "id": "a86c91985b29fa57",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Subset Robustness Test ---\n",
      "Testing stability on random subsets of data\n",
      "Expected: θ similar to original estimate\n",
      "\n",
      "ATE Subset Tests:\n",
      "Original ATE: 1.8048\n",
      "  60% subset: θ = 1.8186, p = 0.0000\n",
      "  80% subset: θ = 1.8099, p = 0.0000\n",
      "  90% subset: θ = 1.8315, p = 0.0000\n"
     ]
    }
   ],
   "execution_count": 36
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "# Orthogonality",
   "id": "ed99ad9cc9dd62c3"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:50.966839Z",
     "start_time": "2025-08-16T14:59:45.505079Z"
    }
   },
   "cell_type": "code",
   "source": [
    "ate_ortho_check = refute_irm_orthogonality(dml_ate, causal_data, n_folds=3)\n",
    "\n",
    "ate_ortho_check\n"
   ],
   "id": "5fa72cf706438ad1",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'theta': 1.8018642155181877,\n",
       " 'oos_moment_test': {'fold_results':    fold      n  psi_mean    psi_var\n",
       "  0     0  10000 -0.041580  63.689179\n",
       "  1     1  10000  0.123151  60.082212\n",
       "  2     2  10000  0.095555  64.122321\n",
       "  3     3  10000 -0.105544  62.945267\n",
       "  4     4  10000 -0.090244  63.587698,\n",
       "  'tstat': -0.10525083126795791,\n",
       "  'pvalue': 0.916176777153225,\n",
       "  'interpretation': 'Should be ≈ 0 if moment condition holds'},\n",
       " 'orthogonality_derivatives': {'full_sample':    basis      d_m1     se_m1      t_m1      d_m0     se_m0      t_m0  \\\n",
       "  0      0 -0.020920  0.006928 -3.019624  0.005909  0.003471  1.702466   \n",
       "  1      1 -0.438562  0.170228 -2.576319  0.174943  0.100904  1.733758   \n",
       "  2      2 -0.090883  0.034073 -2.667285  0.033535  0.020046  1.672908   \n",
       "  \n",
       "          d_g      se_g       t_g  \n",
       "  0 -0.057769  0.131319 -0.439910  \n",
       "  1  0.893241  3.110135  0.287203  \n",
       "  2 -0.085988  0.584861 -0.147023  ,\n",
       "  'trimmed_sample':    basis      d_m1     se_m1      t_m1      d_m0     se_m0      t_m0  \\\n",
       "  0      0 -0.019685  0.006817 -2.887516  0.005929  0.003471  1.708257   \n",
       "  1      1 -0.447197  0.170012 -2.630380  0.174807  0.100906  1.732376   \n",
       "  2      2 -0.090214  0.034067 -2.648097  0.033547  0.020047  1.673450   \n",
       "  \n",
       "          d_g      se_g       t_g  \n",
       "  0 -0.038635  0.129920 -0.297375  \n",
       "  1  0.759712  3.107329  0.244490  \n",
       "  2 -0.075598  0.584781 -0.129276  ,\n",
       "  'problematic_full':    basis      d_m1     se_m1      t_m1      d_m0     se_m0      t_m0  \\\n",
       "  0      0 -0.020920  0.006928 -3.019624  0.005909  0.003471  1.702466   \n",
       "  1      1 -0.438562  0.170228 -2.576319  0.174943  0.100904  1.733758   \n",
       "  2      2 -0.090883  0.034073 -2.667285  0.033535  0.020046  1.672908   \n",
       "  \n",
       "          d_g      se_g       t_g  \n",
       "  0 -0.057769  0.131319 -0.439910  \n",
       "  1  0.893241  3.110135  0.287203  \n",
       "  2 -0.085988  0.584861 -0.147023  ,\n",
       "  'problematic_trimmed':    basis      d_m1     se_m1      t_m1      d_m0     se_m0      t_m0  \\\n",
       "  0      0 -0.019685  0.006817 -2.887516  0.005929  0.003471  1.708257   \n",
       "  1      1 -0.447197  0.170012 -2.630380  0.174807  0.100906  1.732376   \n",
       "  2      2 -0.090214  0.034067 -2.648097  0.033547  0.020047  1.673450   \n",
       "  \n",
       "          d_g      se_g       t_g  \n",
       "  0 -0.038635  0.129920 -0.297375  \n",
       "  1  0.759712  3.107329  0.244490  \n",
       "  2 -0.075598  0.584781 -0.129276  ,\n",
       "  'interpretation': 'Large |t-stats| (>2) indicate calibration issues'},\n",
       " 'influence_diagnostics': {'full_sample': {'se_plugin': 0.03546447121592381,\n",
       "   'kurtosis': 8.916919291482913,\n",
       "   'p99_over_med': 6.072948157376655,\n",
       "   'top_influential':        i         psi         g      res_t  res_c\n",
       "   0  20387  136.241190  0.085617  11.977468    0.0\n",
       "   1  24643   76.577955  0.111867   8.768497    0.0\n",
       "   2  34037  -74.076646  0.088655  -6.537696   -0.0\n",
       "   3   7960  -73.599099  0.110099  -8.319739   -0.0\n",
       "   4  13297   73.497787  0.136394  10.001563    0.0\n",
       "   5   6848  -69.020979  0.152402 -10.746125   -0.0\n",
       "   6  10815   67.332351  0.157869  10.569262    0.0\n",
       "   7   9047  -64.997905  0.075897  -4.941403   -0.0\n",
       "   8    236   64.839614  0.109513   7.260651    0.0\n",
       "   9  16095  -64.579329  0.091667  -5.991942   -0.0},\n",
       "  'trimmed_sample': {'se_plugin': 0.03546424720032873,\n",
       "   'kurtosis': 8.917552900502693,\n",
       "   'p99_over_med': 6.073018677510254,\n",
       "   'top_influential':        i         psi         g      res_t  res_c\n",
       "   0  20387  136.241190  0.085617  11.977468    0.0\n",
       "   1  24643   76.577955  0.111867   8.768497    0.0\n",
       "   2  34037  -74.076646  0.088655  -6.537696   -0.0\n",
       "   3   7960  -73.599099  0.110099  -8.319739   -0.0\n",
       "   4  13297   73.497787  0.136394  10.001563    0.0\n",
       "   5   6848  -69.020979  0.152402 -10.746125   -0.0\n",
       "   6  10815   67.332351  0.157869  10.569262    0.0\n",
       "   7   9047  -64.997905  0.075897  -4.941403   -0.0\n",
       "   8    236   64.839614  0.109513   7.260651    0.0\n",
       "   9  16095  -64.579329  0.091667  -5.991942   -0.0},\n",
       "  'interpretation': 'Heavy tails or extreme kurtosis suggest instability'},\n",
       " 'trimming_info': {'bounds': (0.02, 0.98),\n",
       "  'n_trimmed': 1,\n",
       "  'pct_trimmed': 0.002},\n",
       " 'diagnostic_conditions': {'oos_moment_ok': True,\n",
       "  'derivs_full_ok': False,\n",
       "  'derivs_trim_ok': False,\n",
       "  'se_reasonable': np.True_,\n",
       "  'no_extreme_influence': True,\n",
       "  'trimming_reasonable': np.True_},\n",
       " 'overall_assessment': 'CAUTION: Most conditions satisfied'}"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 37
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:50.990788Z",
     "start_time": "2025-08-16T14:59:50.986797Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 1. Out-of-sample moment check\n",
    "print(\"\\n--- 1. Out-of-Sample Moment Check ---\")\n",
    "oos_test = ate_ortho_check['oos_moment_test']\n",
    "print(f\"T-statistic: {oos_test['tstat']:.4f}\")\n",
    "print(f\"P-value: {oos_test['pvalue']:.4f}\")\n",
    "print(f\"Interpretation: {oos_test['interpretation']}\")\n",
    "print(\"\\nFold-wise results:\")\n",
    "display(oos_test['fold_results'])\n"
   ],
   "id": "cc41ece52c878c30",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- 1. Out-of-Sample Moment Check ---\n",
      "T-statistic: -0.1053\n",
      "P-value: 0.9162\n",
      "Interpretation: Should be ≈ 0 if moment condition holds\n",
      "\n",
      "Fold-wise results:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "   fold      n  psi_mean    psi_var\n",
       "0     0  10000 -0.041580  63.689179\n",
       "1     1  10000  0.123151  60.082212\n",
       "2     2  10000  0.095555  64.122321\n",
       "3     3  10000 -0.105544  62.945267\n",
       "4     4  10000 -0.090244  63.587698"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fold</th>\n",
       "      <th>n</th>\n",
       "      <th>psi_mean</th>\n",
       "      <th>psi_var</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>10000</td>\n",
       "      <td>-0.041580</td>\n",
       "      <td>63.689179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>10000</td>\n",
       "      <td>0.123151</td>\n",
       "      <td>60.082212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>10000</td>\n",
       "      <td>0.095555</td>\n",
       "      <td>64.122321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>10000</td>\n",
       "      <td>-0.105544</td>\n",
       "      <td>62.945267</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>10000</td>\n",
       "      <td>-0.090244</td>\n",
       "      <td>63.587698</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 38
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:51.012609Z",
     "start_time": "2025-08-16T14:59:51.002617Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 2. Orthogonality derivatives\n",
    "print(\"\\n--- 2. Orthogonality (Gateaux Derivative) Tests ---\")\n",
    "ortho_derivs = ate_ortho_check['orthogonality_derivatives']\n",
    "print(f\"Interpretation: {ortho_derivs['interpretation']}\")\n",
    "\n",
    "print(\"\\nFull sample derivatives:\")\n",
    "display(ortho_derivs['full_sample'])\n",
    "\n",
    "print(\"\\nTrimmed sample derivatives:\")\n",
    "display(ortho_derivs['trimmed_sample'])\n",
    "\n",
    "if len(ortho_derivs['problematic_full']) > 0:\n",
    "    print(\"\\n⚠ PROBLEMATIC derivatives (full sample):\")\n",
    "    display(ortho_derivs['problematic_full'])\n",
    "else:\n",
    "    print(\"\\n✓ No problematic derivatives in full sample\")\n",
    "\n",
    "if len(ortho_derivs['problematic_trimmed']) > 0:\n",
    "    print(\"\\n⚠ PROBLEMATIC derivatives (trimmed sample):\")\n",
    "    display(ortho_derivs['problematic_trimmed'])\n",
    "else:\n",
    "    print(\"\\n✓ No problematic derivatives in trimmed sample\")\n"
   ],
   "id": "475f3800d2c20a2c",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- 2. Orthogonality (Gateaux Derivative) Tests ---\n",
      "Interpretation: Large |t-stats| (>2) indicate calibration issues\n",
      "\n",
      "Full sample derivatives:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "   basis      d_m1     se_m1      t_m1      d_m0     se_m0      t_m0  \\\n",
       "0      0 -0.020920  0.006928 -3.019624  0.005909  0.003471  1.702466   \n",
       "1      1 -0.438562  0.170228 -2.576319  0.174943  0.100904  1.733758   \n",
       "2      2 -0.090883  0.034073 -2.667285  0.033535  0.020046  1.672908   \n",
       "\n",
       "        d_g      se_g       t_g  \n",
       "0 -0.057769  0.131319 -0.439910  \n",
       "1  0.893241  3.110135  0.287203  \n",
       "2 -0.085988  0.584861 -0.147023  "
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basis</th>\n",
       "      <th>d_m1</th>\n",
       "      <th>se_m1</th>\n",
       "      <th>t_m1</th>\n",
       "      <th>d_m0</th>\n",
       "      <th>se_m0</th>\n",
       "      <th>t_m0</th>\n",
       "      <th>d_g</th>\n",
       "      <th>se_g</th>\n",
       "      <th>t_g</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>-0.020920</td>\n",
       "      <td>0.006928</td>\n",
       "      <td>-3.019624</td>\n",
       "      <td>0.005909</td>\n",
       "      <td>0.003471</td>\n",
       "      <td>1.702466</td>\n",
       "      <td>-0.057769</td>\n",
       "      <td>0.131319</td>\n",
       "      <td>-0.439910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>-0.438562</td>\n",
       "      <td>0.170228</td>\n",
       "      <td>-2.576319</td>\n",
       "      <td>0.174943</td>\n",
       "      <td>0.100904</td>\n",
       "      <td>1.733758</td>\n",
       "      <td>0.893241</td>\n",
       "      <td>3.110135</td>\n",
       "      <td>0.287203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>-0.090883</td>\n",
       "      <td>0.034073</td>\n",
       "      <td>-2.667285</td>\n",
       "      <td>0.033535</td>\n",
       "      <td>0.020046</td>\n",
       "      <td>1.672908</td>\n",
       "      <td>-0.085988</td>\n",
       "      <td>0.584861</td>\n",
       "      <td>-0.147023</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Trimmed sample derivatives:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "   basis      d_m1     se_m1      t_m1      d_m0     se_m0      t_m0  \\\n",
       "0      0 -0.019685  0.006817 -2.887516  0.005929  0.003471  1.708257   \n",
       "1      1 -0.447197  0.170012 -2.630380  0.174807  0.100906  1.732376   \n",
       "2      2 -0.090214  0.034067 -2.648097  0.033547  0.020047  1.673450   \n",
       "\n",
       "        d_g      se_g       t_g  \n",
       "0 -0.038635  0.129920 -0.297375  \n",
       "1  0.759712  3.107329  0.244490  \n",
       "2 -0.075598  0.584781 -0.129276  "
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basis</th>\n",
       "      <th>d_m1</th>\n",
       "      <th>se_m1</th>\n",
       "      <th>t_m1</th>\n",
       "      <th>d_m0</th>\n",
       "      <th>se_m0</th>\n",
       "      <th>t_m0</th>\n",
       "      <th>d_g</th>\n",
       "      <th>se_g</th>\n",
       "      <th>t_g</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>-0.019685</td>\n",
       "      <td>0.006817</td>\n",
       "      <td>-2.887516</td>\n",
       "      <td>0.005929</td>\n",
       "      <td>0.003471</td>\n",
       "      <td>1.708257</td>\n",
       "      <td>-0.038635</td>\n",
       "      <td>0.129920</td>\n",
       "      <td>-0.297375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>-0.447197</td>\n",
       "      <td>0.170012</td>\n",
       "      <td>-2.630380</td>\n",
       "      <td>0.174807</td>\n",
       "      <td>0.100906</td>\n",
       "      <td>1.732376</td>\n",
       "      <td>0.759712</td>\n",
       "      <td>3.107329</td>\n",
       "      <td>0.244490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>-0.090214</td>\n",
       "      <td>0.034067</td>\n",
       "      <td>-2.648097</td>\n",
       "      <td>0.033547</td>\n",
       "      <td>0.020047</td>\n",
       "      <td>1.673450</td>\n",
       "      <td>-0.075598</td>\n",
       "      <td>0.584781</td>\n",
       "      <td>-0.129276</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "⚠ PROBLEMATIC derivatives (full sample):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "   basis      d_m1     se_m1      t_m1      d_m0     se_m0      t_m0  \\\n",
       "0      0 -0.020920  0.006928 -3.019624  0.005909  0.003471  1.702466   \n",
       "1      1 -0.438562  0.170228 -2.576319  0.174943  0.100904  1.733758   \n",
       "2      2 -0.090883  0.034073 -2.667285  0.033535  0.020046  1.672908   \n",
       "\n",
       "        d_g      se_g       t_g  \n",
       "0 -0.057769  0.131319 -0.439910  \n",
       "1  0.893241  3.110135  0.287203  \n",
       "2 -0.085988  0.584861 -0.147023  "
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basis</th>\n",
       "      <th>d_m1</th>\n",
       "      <th>se_m1</th>\n",
       "      <th>t_m1</th>\n",
       "      <th>d_m0</th>\n",
       "      <th>se_m0</th>\n",
       "      <th>t_m0</th>\n",
       "      <th>d_g</th>\n",
       "      <th>se_g</th>\n",
       "      <th>t_g</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>-0.020920</td>\n",
       "      <td>0.006928</td>\n",
       "      <td>-3.019624</td>\n",
       "      <td>0.005909</td>\n",
       "      <td>0.003471</td>\n",
       "      <td>1.702466</td>\n",
       "      <td>-0.057769</td>\n",
       "      <td>0.131319</td>\n",
       "      <td>-0.439910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>-0.438562</td>\n",
       "      <td>0.170228</td>\n",
       "      <td>-2.576319</td>\n",
       "      <td>0.174943</td>\n",
       "      <td>0.100904</td>\n",
       "      <td>1.733758</td>\n",
       "      <td>0.893241</td>\n",
       "      <td>3.110135</td>\n",
       "      <td>0.287203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>-0.090883</td>\n",
       "      <td>0.034073</td>\n",
       "      <td>-2.667285</td>\n",
       "      <td>0.033535</td>\n",
       "      <td>0.020046</td>\n",
       "      <td>1.672908</td>\n",
       "      <td>-0.085988</td>\n",
       "      <td>0.584861</td>\n",
       "      <td>-0.147023</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "⚠ PROBLEMATIC derivatives (trimmed sample):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "   basis      d_m1     se_m1      t_m1      d_m0     se_m0      t_m0  \\\n",
       "0      0 -0.019685  0.006817 -2.887516  0.005929  0.003471  1.708257   \n",
       "1      1 -0.447197  0.170012 -2.630380  0.174807  0.100906  1.732376   \n",
       "2      2 -0.090214  0.034067 -2.648097  0.033547  0.020047  1.673450   \n",
       "\n",
       "        d_g      se_g       t_g  \n",
       "0 -0.038635  0.129920 -0.297375  \n",
       "1  0.759712  3.107329  0.244490  \n",
       "2 -0.075598  0.584781 -0.129276  "
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>basis</th>\n",
       "      <th>d_m1</th>\n",
       "      <th>se_m1</th>\n",
       "      <th>t_m1</th>\n",
       "      <th>d_m0</th>\n",
       "      <th>se_m0</th>\n",
       "      <th>t_m0</th>\n",
       "      <th>d_g</th>\n",
       "      <th>se_g</th>\n",
       "      <th>t_g</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>-0.019685</td>\n",
       "      <td>0.006817</td>\n",
       "      <td>-2.887516</td>\n",
       "      <td>0.005929</td>\n",
       "      <td>0.003471</td>\n",
       "      <td>1.708257</td>\n",
       "      <td>-0.038635</td>\n",
       "      <td>0.129920</td>\n",
       "      <td>-0.297375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>-0.447197</td>\n",
       "      <td>0.170012</td>\n",
       "      <td>-2.630380</td>\n",
       "      <td>0.174807</td>\n",
       "      <td>0.100906</td>\n",
       "      <td>1.732376</td>\n",
       "      <td>0.759712</td>\n",
       "      <td>3.107329</td>\n",
       "      <td>0.244490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>-0.090214</td>\n",
       "      <td>0.034067</td>\n",
       "      <td>-2.648097</td>\n",
       "      <td>0.033547</td>\n",
       "      <td>0.020047</td>\n",
       "      <td>1.673450</td>\n",
       "      <td>-0.075598</td>\n",
       "      <td>0.584781</td>\n",
       "      <td>-0.129276</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 39
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:51.117795Z",
     "start_time": "2025-08-16T14:59:51.113579Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 3. Influence diagnostics\n",
    "print(\"\\n--- 3. Influence Diagnostics ---\")\n",
    "influence = ate_ortho_check['influence_diagnostics']\n",
    "print(f\"Interpretation: {influence['interpretation']}\")\n",
    "\n",
    "print(\"\\nFull sample influence metrics:\")\n",
    "print(f\"  Plugin SE: {influence['full_sample']['se_plugin']:.4f}\")\n",
    "print(f\"  Kurtosis: {influence['full_sample']['kurtosis']:.2f}\")\n",
    "print(f\"  P99/Median ratio: {influence['full_sample']['p99_over_med']:.2f}\")\n",
    "\n",
    "print(\"\\nTrimmed sample influence metrics:\")\n",
    "print(f\"  Plugin SE: {influence['trimmed_sample']['se_plugin']:.4f}\")\n",
    "print(f\"  Kurtosis: {influence['trimmed_sample']['kurtosis']:.2f}\")\n",
    "print(f\"  P99/Median ratio: {influence['trimmed_sample']['p99_over_med']:.2f}\")\n",
    "\n",
    "print(\"\\nTop influential observations (full sample):\")\n",
    "display(influence['full_sample']['top_influential'])\n"
   ],
   "id": "85f88b3c24cc09cd",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- 3. Influence Diagnostics ---\n",
      "Interpretation: Heavy tails or extreme kurtosis suggest instability\n",
      "\n",
      "Full sample influence metrics:\n",
      "  Plugin SE: 0.0355\n",
      "  Kurtosis: 8.92\n",
      "  P99/Median ratio: 6.07\n",
      "\n",
      "Trimmed sample influence metrics:\n",
      "  Plugin SE: 0.0355\n",
      "  Kurtosis: 8.92\n",
      "  P99/Median ratio: 6.07\n",
      "\n",
      "Top influential observations (full sample):\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "       i         psi         g      res_t  res_c\n",
       "0  20387  136.241190  0.085617  11.977468    0.0\n",
       "1  24643   76.577955  0.111867   8.768497    0.0\n",
       "2  34037  -74.076646  0.088655  -6.537696   -0.0\n",
       "3   7960  -73.599099  0.110099  -8.319739   -0.0\n",
       "4  13297   73.497787  0.136394  10.001563    0.0\n",
       "5   6848  -69.020979  0.152402 -10.746125   -0.0\n",
       "6  10815   67.332351  0.157869  10.569262    0.0\n",
       "7   9047  -64.997905  0.075897  -4.941403   -0.0\n",
       "8    236   64.839614  0.109513   7.260651    0.0\n",
       "9  16095  -64.579329  0.091667  -5.991942   -0.0"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>i</th>\n",
       "      <th>psi</th>\n",
       "      <th>g</th>\n",
       "      <th>res_t</th>\n",
       "      <th>res_c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>20387</td>\n",
       "      <td>136.241190</td>\n",
       "      <td>0.085617</td>\n",
       "      <td>11.977468</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>24643</td>\n",
       "      <td>76.577955</td>\n",
       "      <td>0.111867</td>\n",
       "      <td>8.768497</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>34037</td>\n",
       "      <td>-74.076646</td>\n",
       "      <td>0.088655</td>\n",
       "      <td>-6.537696</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7960</td>\n",
       "      <td>-73.599099</td>\n",
       "      <td>0.110099</td>\n",
       "      <td>-8.319739</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>13297</td>\n",
       "      <td>73.497787</td>\n",
       "      <td>0.136394</td>\n",
       "      <td>10.001563</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6848</td>\n",
       "      <td>-69.020979</td>\n",
       "      <td>0.152402</td>\n",
       "      <td>-10.746125</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>10815</td>\n",
       "      <td>67.332351</td>\n",
       "      <td>0.157869</td>\n",
       "      <td>10.569262</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>9047</td>\n",
       "      <td>-64.997905</td>\n",
       "      <td>0.075897</td>\n",
       "      <td>-4.941403</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>236</td>\n",
       "      <td>64.839614</td>\n",
       "      <td>0.109513</td>\n",
       "      <td>7.260651</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>16095</td>\n",
       "      <td>-64.579329</td>\n",
       "      <td>0.091667</td>\n",
       "      <td>-5.991942</td>\n",
       "      <td>-0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 40
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:51.193879Z",
     "start_time": "2025-08-16T14:59:51.192006Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Trimming information\n",
    "print(\"\\n--- Propensity Score Trimming ---\")\n",
    "trim_info = ate_ortho_check['trimming_info']\n",
    "print(f\"Trimming bounds: {trim_info['bounds']}\")\n",
    "print(f\"Observations trimmed: {trim_info['n_trimmed']} ({trim_info['pct_trimmed']:.1f}%)\")\n"
   ],
   "id": "b52d415397857df4",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Propensity Score Trimming ---\n",
      "Trimming bounds: (0.02, 0.98)\n",
      "Observations trimmed: 1 (0.0%)\n"
     ]
    }
   ],
   "execution_count": 41
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:51.232296Z",
     "start_time": "2025-08-16T14:59:51.230159Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Diagnostic conditions breakdown\n",
    "print(\"\\n--- Diagnostic Conditions Assessment ---\")\n",
    "conditions = ate_ortho_check['diagnostic_conditions']\n",
    "\n",
    "print(\"Individual condition checks:\")\n",
    "for condition, passed in conditions.items():\n",
    "    status = \"✓ PASS\" if passed else \"✗ FAIL\"\n",
    "    print(f\"  {condition}: {status}\")\n",
    "\n",
    "print(f\"\\nOverall: {ate_ortho_check['overall_assessment']}\")\n"
   ],
   "id": "a7148449888110e7",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Diagnostic Conditions Assessment ---\n",
      "Individual condition checks:\n",
      "  oos_moment_ok: ✓ PASS\n",
      "  derivs_full_ok: ✗ FAIL\n",
      "  derivs_trim_ok: ✗ FAIL\n",
      "  se_reasonable: ✓ PASS\n",
      "  no_extreme_influence: ✓ PASS\n",
      "  trimming_reasonable: ✓ PASS\n",
      "\n",
      "Overall: CAUTION: Most conditions satisfied\n"
     ]
    }
   ],
   "execution_count": 42
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:56.829170Z",
     "start_time": "2025-08-16T14:59:51.253812Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Also test with ATT estimation for comparison\n",
    "print(\"\\n--- ATT Orthogonality Diagnostics (Summary) ---\")\n",
    "att_ortho_check = refute_irm_orthogonality(dml_att, causal_data, n_folds=3)\n",
    "\n",
    "print(f\"ATT estimate: {att_ortho_check['theta']:.4f}\")\n",
    "print(f\"OOS moment t-stat: {att_ortho_check['oos_moment_test']['tstat']:.4f}\")\n",
    "print(f\"Problematic derivatives (full): {len(att_ortho_check['orthogonality_derivatives']['problematic_full'])}\")\n",
    "print(f\"Problematic derivatives (trimmed): {len(att_ortho_check['orthogonality_derivatives']['problematic_trimmed'])}\")\n",
    "print(f\"Influence SE: {att_ortho_check['influence_diagnostics']['full_sample']['se_plugin']:.4f}\")\n",
    "print(f\"Assessment: {att_ortho_check['overall_assessment']}\")\n"
   ],
   "id": "7212bd51053a3ed8",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- ATT Orthogonality Diagnostics (Summary) ---\n",
      "ATT estimate: 1.7752\n",
      "OOS moment t-stat: 0.1340\n",
      "Problematic derivatives (full): 3\n",
      "Problematic derivatives (trimmed): 3\n",
      "Influence SE: 0.0355\n",
      "Assessment: CAUTION: Most conditions satisfied\n"
     ]
    }
   ],
   "execution_count": 43
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:56.855868Z",
     "start_time": "2025-08-16T14:59:56.853509Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Interpretation guide for new diagnostics\n",
    "print(\"\\n--- New Diagnostics Interpretation Guide ---\")\n",
    "print(\"🔍 OUT-OF-SAMPLE MOMENT CHECK:\")\n",
    "print(\"  - T-stat ≈ 0 (|t| < 2): ✓ Moment condition satisfied\")\n",
    "print(\"  - Large |t-stat| (|t| > 2): ⚠ Potential moment condition violation\")\n",
    "print(\"  - This avoids tautological results by testing on held-out data\")\n",
    "\n",
    "print(\"\\n🔍 ORTHOGONALITY DERIVATIVES:\")\n",
    "print(\"  - |t-stats| < 2 for all basis functions: ✓ Good calibration\")\n",
    "print(\"  - Large |t-stats| (>2) for constant (basis=0): ⚠ Calibration issues\")\n",
    "print(\"    * t_m1 large: Treated outcome model miscalibrated\")\n",
    "print(\"    * t_m0 large: Control outcome model miscalibrated\") \n",
    "print(\"    * t_g large: Propensity model miscalibrated\")\n",
    "print(\"  - Large |t-stats| for covariates: ⚠ Covariate-specific issues\")\n",
    "\n",
    "print(\"\\n🔍 INFLUENCE DIAGNOSTICS:\")\n",
    "print(\"  - Plugin SE similar to DoubleML SE: ✓ Consistent uncertainty quantification\")\n",
    "print(\"  - Low kurtosis (<10): ✓ Stable influence function\")\n",
    "print(\"  - P99/Median ratio <10: ✓ No extreme influential observations\")\n",
    "print(\"  - High kurtosis or extreme ratios: ⚠ Unstable estimates\")\n",
    "\n",
    "print(\"\\n📊 ACTIONABLE INSIGHTS:\")\n",
    "print(\"  - Large derivatives → Revisit ML models, add regularization\")\n",
    "print(\"  - High influence metrics → Check for outliers, consider trimming\")\n",
    "print(\"  - Failed OOS moment → Potential fundamental misspecification\")\n",
    "print(\"  - Multiple failures → Consider different estimation approach\")\n"
   ],
   "id": "4809ed4f800d391f",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- New Diagnostics Interpretation Guide ---\n",
      "🔍 OUT-OF-SAMPLE MOMENT CHECK:\n",
      "  - T-stat ≈ 0 (|t| < 2): ✓ Moment condition satisfied\n",
      "  - Large |t-stat| (|t| > 2): ⚠ Potential moment condition violation\n",
      "  - This avoids tautological results by testing on held-out data\n",
      "\n",
      "🔍 ORTHOGONALITY DERIVATIVES:\n",
      "  - |t-stats| < 2 for all basis functions: ✓ Good calibration\n",
      "  - Large |t-stats| (>2) for constant (basis=0): ⚠ Calibration issues\n",
      "    * t_m1 large: Treated outcome model miscalibrated\n",
      "    * t_m0 large: Control outcome model miscalibrated\n",
      "    * t_g large: Propensity model miscalibrated\n",
      "  - Large |t-stats| for covariates: ⚠ Covariate-specific issues\n",
      "\n",
      "🔍 INFLUENCE DIAGNOSTICS:\n",
      "  - Plugin SE similar to DoubleML SE: ✓ Consistent uncertainty quantification\n",
      "  - Low kurtosis (<10): ✓ Stable influence function\n",
      "  - P99/Median ratio <10: ✓ No extreme influential observations\n",
      "  - High kurtosis or extreme ratios: ⚠ Unstable estimates\n",
      "\n",
      "📊 ACTIONABLE INSIGHTS:\n",
      "  - Large derivatives → Revisit ML models, add regularization\n",
      "  - High influence metrics → Check for outliers, consider trimming\n",
      "  - Failed OOS moment → Potential fundamental misspecification\n",
      "  - Multiple failures → Consider different estimation approach\n"
     ]
    }
   ],
   "execution_count": 44
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:56.866913Z",
     "start_time": "2025-08-16T14:59:56.864993Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Import sensitivity analysis functions\n",
    "from causalkit.refutation import sensitivity_analysis, get_sensitivity_summary"
   ],
   "id": "4973364039805e24",
   "outputs": [],
   "execution_count": 45
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:56.890448Z",
     "start_time": "2025-08-16T14:59:56.879047Z"
    }
   },
   "cell_type": "code",
   "source": [
    "print(\"--- Basic Sensitivity Analysis ---\")\n",
    "print(\"Testing robustness to unobserved confounding\\n\")\n",
    "\n",
    "# Perform sensitivity analysis with moderate confounding assumptions\n",
    "print(\"Scenario 1: Moderate unobserved confounding\")\n",
    "print(\"cf_y=0.03 (outcome confounding), cf_d=0.03 (treatment confounding)\")\n",
    "\n",
    "try:\n",
    "    # Run sensitivity analysis on our ATE result\n",
    "    sensitivity_report_1 = sensitivity_analysis(\n",
    "        ate_result,\n",
    "        cf_y=0.03,  # Confounding strength affecting outcome\n",
    "        cf_d=0.03,  # Confounding strength affecting treatment\n",
    "        rho=1.0     # Perfect correlation between unobserved confounders\n",
    "    )\n",
    "\n",
    "    print(sensitivity_report_1)\n",
    "\n",
    "except Exception as e:\n",
    "    print(f\"Note: Sensitivity analysis requires the model object to support it.\")\n",
    "    print(f\"Error: {e}\")\n",
    "    print(\"\\nThis feature works best with DoubleML models that have sensitivity analysis capabilities.\")"
   ],
   "id": "58031e0e0d5b89e6",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Basic Sensitivity Analysis ---\n",
      "Testing robustness to unobserved confounding\n",
      "\n",
      "Scenario 1: Moderate unobserved confounding\n",
      "cf_y=0.03 (outcome confounding), cf_d=0.03 (treatment confounding)\n",
      "================== Sensitivity Analysis ==================\n",
      "\n",
      "------------------ Scenario          ------------------\n",
      "Significance Level: level=0.95\n",
      "Sensitivity parameters: cf_y=0.03; cf_d=0.03, rho=1.0\n",
      "\n",
      "------------------ Bounds with CI    ------------------\n",
      "   CI lower  theta lower     theta  theta upper  CI upper\n",
      "t  1.514031     1.572741  1.804784     2.036826  2.095547\n",
      "\n",
      "------------------ Robustness Values ------------------\n",
      "   H_0     RV (%)    RVa (%)\n",
      "t  0.0  21.050746  20.430468\n"
     ]
    }
   ],
   "execution_count": 46
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T14:59:56.899268Z",
     "start_time": "2025-08-16T14:59:56.897907Z"
    }
   },
   "cell_type": "code",
   "source": "",
   "id": "d48c179fbaec8c9d",
   "outputs": [],
   "execution_count": null
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
