{
 "cells": [
  {
   "metadata": {
    "collapsed": true
   },
   "cell_type": "markdown",
   "source": "# Scenario 1",
   "id": "8fcc272d63fa7879"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "| Is RCT        | Treatment | Outcome    | EDA | Estimands | Refutation | Docs, Examples | Synthetic tests |\n",
    "|---------------|-----------|------------|-----|-----------|------------|----------------|-----------------|\n",
    "| Observational | Binary    | Continuous | No  | No        | No         | No             | No              |"
   ],
   "id": "a636362b8fad6e7b"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "## Generate data",
   "id": "889d566926f81af1"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T10:27:56.719308Z",
     "start_time": "2025-08-16T10:27:55.049559Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from causalkit.data import CausalDatasetGenerator, CausalData\n",
    "\n",
    "# Reproducibility\n",
    "np.random.seed(42)\n",
    "\n",
    "confounder_specs = [\n",
    "    {\"name\": \"tenure_months\", \"dist\": \"normal\", \"mu\": 24, \"sd\": 12},\n",
    "    {\"name\": \"avg_sessions_week\", \"dist\": \"normal\", \"mu\": 5, \"sd\": 2},\n",
    "    {\"name\": \"spend_last_month\", \"dist\": \"uniform\", \"a\": 0, \"b\": 200},\n",
    "    {\"name\": \"premium_user\", \"dist\": \"bernoulli\", \"p\": 0.25},\n",
    "    {\"name\": \"urban_resident\", \"dist\": \"bernoulli\", \"p\": 0.60},\n",
    "]\n",
    "\n",
    "# Causal effect and noise\n",
    "theta = 1.8  # ATE: +1.8 ARPU units if new_feature = 1\n",
    "sigma_y = 3.5  # ARPU noise std\n",
    "target_t_rate = 0.35  # ~35% treated\n",
    "\n",
    "# Effects of confounders on ARPU (baseline, additive)\n",
    "# Order: tenure_months, avg_sessions_week, spend_last_month, premium_user, urban_resident\n",
    "beta_y = np.array([\n",
    "    0.05,  # tenure_months: small positive effect\n",
    "    0.40,  # avg_sessions_week: strong positive effect\n",
    "    0.02,  # spend_last_month: recent spend correlates with ARPU\n",
    "    2.00,  # premium_user: premium users have higher ARPU\n",
    "    1.00,  # urban_resident: urban users slightly higher ARPU\n",
    "], dtype=float)\n",
    "\n",
    "# Effects of confounders on treatment assignment (log-odds scale)\n",
    "beta_t = np.array([\n",
    "    0.015,  # tenure_months\n",
    "    0.10,  # avg_sessions_week\n",
    "    0.002,  # spend_last_month\n",
    "    0.75,  # premium_user\n",
    "    0.30,  # urban_resident: more likely to get the feature\n",
    "], dtype=float)\n",
    "\n",
    "gen = CausalDatasetGenerator(\n",
    "    theta=theta,\n",
    "    outcome_type=\"continuous\",\n",
    "    sigma_y=sigma_y,\n",
    "    target_t_rate=target_t_rate,\n",
    "    seed=42,\n",
    "    confounder_specs=confounder_specs,\n",
    "    beta_y=beta_y,\n",
    "    beta_t=beta_t,\n",
    ")\n",
    "\n",
    "\n",
    "# Create dataset\n",
    "causal_data = gen.to_causal_data(\n",
    "    n=5000,\n",
    "    cofounders = [\n",
    "    \"tenure_months\",\n",
    "    \"avg_sessions_week\",\n",
    "    \"spend_last_month\",\n",
    "    \"premium_user\",\n",
    "    \"urban_resident\",\n",
    "]\n",
    ")\n",
    "\n",
    "# Show first few rows\n",
    "causal_data.df.head()\n"
   ],
   "id": "5df3d791f8395962",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "          y    t  tenure_months  avg_sessions_week  spend_last_month  \\\n",
       "0  9.001966  0.0      27.656605           4.484096        156.289662   \n",
       "1  8.253476  0.0      11.520191           4.401028         49.867370   \n",
       "2  7.996043  1.0      33.005414           3.606680        164.168275   \n",
       "3  8.347067  0.0      35.286777           5.856966         35.426710   \n",
       "4  5.505211  1.0       0.587578           5.469292         71.894705   \n",
       "\n",
       "   premium_user  urban_resident  \n",
       "0           0.0             1.0  \n",
       "1           1.0             0.0  \n",
       "2           0.0             1.0  \n",
       "3           0.0             0.0  \n",
       "4           0.0             0.0  "
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y</th>\n",
       "      <th>t</th>\n",
       "      <th>tenure_months</th>\n",
       "      <th>avg_sessions_week</th>\n",
       "      <th>spend_last_month</th>\n",
       "      <th>premium_user</th>\n",
       "      <th>urban_resident</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9.001966</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27.656605</td>\n",
       "      <td>4.484096</td>\n",
       "      <td>156.289662</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8.253476</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.520191</td>\n",
       "      <td>4.401028</td>\n",
       "      <td>49.867370</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.996043</td>\n",
       "      <td>1.0</td>\n",
       "      <td>33.005414</td>\n",
       "      <td>3.606680</td>\n",
       "      <td>164.168275</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.347067</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.286777</td>\n",
       "      <td>5.856966</td>\n",
       "      <td>35.426710</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.505211</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.587578</td>\n",
       "      <td>5.469292</td>\n",
       "      <td>71.894705</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 1
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "## EDA\n",
   "id": "5e37434a3725215a"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T10:27:56.778321Z",
     "start_time": "2025-08-16T10:27:56.774762Z"
    }
   },
   "cell_type": "code",
   "source": [
    "from causalkit.eda import CausalEDA\n",
    "eda = CausalEDA(causal_data)"
   ],
   "id": "afd5e60494139b52",
   "outputs": [],
   "execution_count": 2
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "### General",
   "id": "d1f80850070fb4bb"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T10:27:56.811537Z",
     "start_time": "2025-08-16T10:27:56.809263Z"
    }
   },
   "cell_type": "code",
   "source": "eda.data_shape()",
   "id": "42b71d7670c08369",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'n_rows': 5000, 'n_columns': 7}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 3
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T10:27:56.823638Z",
     "start_time": "2025-08-16T10:27:56.816779Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 1) Comprehensive outcome statistics by treatment\n",
    "# Provides detailed statistics including count, mean, std, min, percentiles, and max\n",
    "eda.outcome_stats()\n",
    "\n"
   ],
   "id": "fddea7b8fd105fd6",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "           count      mean       std       min       p10       p25    median  \\\n",
       "treatment                                                                      \n",
       "0.0         3294  6.049281  3.961794 -8.248459  1.020819  3.316924  6.024034   \n",
       "1.0         1706  8.489068  3.937085 -2.920828  3.368318  5.684483  8.556497   \n",
       "\n",
       "                 p75        p90        max  \n",
       "treatment                                   \n",
       "0.0         8.713549  11.168524  22.141834  \n",
       "1.0        11.121632  13.640342  22.031603  "
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>p10</th>\n",
       "      <th>p25</th>\n",
       "      <th>median</th>\n",
       "      <th>p75</th>\n",
       "      <th>p90</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>treatment</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>3294</td>\n",
       "      <td>6.049281</td>\n",
       "      <td>3.961794</td>\n",
       "      <td>-8.248459</td>\n",
       "      <td>1.020819</td>\n",
       "      <td>3.316924</td>\n",
       "      <td>6.024034</td>\n",
       "      <td>8.713549</td>\n",
       "      <td>11.168524</td>\n",
       "      <td>22.141834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>1706</td>\n",
       "      <td>8.489068</td>\n",
       "      <td>3.937085</td>\n",
       "      <td>-2.920828</td>\n",
       "      <td>3.368318</td>\n",
       "      <td>5.684483</td>\n",
       "      <td>8.556497</td>\n",
       "      <td>11.121632</td>\n",
       "      <td>13.640342</td>\n",
       "      <td>22.031603</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 4
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T10:27:56.946139Z",
     "start_time": "2025-08-16T10:27:56.848157Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 2) Outcome distribution by treatment (hist + boxplot) - using new outcome_plots() method\n",
    "fig1, fig2 = eda.outcome_plots()\n",
    "plt.show()"
   ],
   "id": "880b0a5072b4df9b",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 700x400 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 700x400 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 5
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "### Confounders",
   "id": "f2e00d21f202152e"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T10:28:01.991500Z",
     "start_time": "2025-08-16T10:27:56.967484Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Shows means for control/treated groups, absolute differences, and SMD values\n",
    "confounders_balance_df = eda.confounders_means()\n",
    "display(confounders_balance_df)\n",
    "\n",
    "# NEW: PropensityModel - fit_propensity() now returns a PropensityModel with built-in methods\n",
    "# The PropensityModel encapsulates propensity scores and provides diagnostic methods\n",
    "ps_model = eda.fit_propensity()\n",
    "\n",
    "# 1) ROC AUC - shows how predictable treatment is from confounders\n",
    "roc_auc_score = ps_model.roc_auc\n",
    "print(\"ROC AUC from PropensityModel:\", round(roc_auc_score, 4))\n",
    "\n",
    "# 2) Positivity check - assess overlap between treatment groups\n",
    "positivity_result = ps_model.positivity_check()\n",
    "print(\"Positivity check from PropensityModel:\", positivity_result)\n",
    "\n",
    "shap_values_df = ps_model.shap\n",
    "display(shap_values_df)\n",
    "\n",
    "ps_model.ps_graph()\n",
    "plt.show()"
   ],
   "id": "370ce9b4dfabf136",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "                    mean_t_0    mean_t_1  abs_diff       smd\n",
       "confounders                                                 \n",
       "premium_user        0.206436    0.352286  0.145850  0.329364\n",
       "avg_sessions_week   4.862366    5.262098  0.399732  0.198836\n",
       "tenure_months      23.059536   25.116802  2.057266  0.172035\n",
       "urban_resident      0.584699    0.633646  0.048947  0.100418\n",
       "spend_last_month   98.980583  103.578775  4.598192  0.080595"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_t_0</th>\n",
       "      <th>mean_t_1</th>\n",
       "      <th>abs_diff</th>\n",
       "      <th>smd</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>confounders</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>premium_user</th>\n",
       "      <td>0.206436</td>\n",
       "      <td>0.352286</td>\n",
       "      <td>0.145850</td>\n",
       "      <td>0.329364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>avg_sessions_week</th>\n",
       "      <td>4.862366</td>\n",
       "      <td>5.262098</td>\n",
       "      <td>0.399732</td>\n",
       "      <td>0.198836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tenure_months</th>\n",
       "      <td>23.059536</td>\n",
       "      <td>25.116802</td>\n",
       "      <td>2.057266</td>\n",
       "      <td>0.172035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>urban_resident</th>\n",
       "      <td>0.584699</td>\n",
       "      <td>0.633646</td>\n",
       "      <td>0.048947</td>\n",
       "      <td>0.100418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>spend_last_month</th>\n",
       "      <td>98.980583</td>\n",
       "      <td>103.578775</td>\n",
       "      <td>4.598192</td>\n",
       "      <td>0.080595</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ROC AUC from PropensityModel: 0.5964\n",
      "Positivity check from PropensityModel: {'bounds': (0.05, 0.95), 'share_below': 0.002, 'share_above': 0.0, 'flag': False}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "             feature  shap_mean\n",
       "0      tenure_months   0.000929\n",
       "1  avg_sessions_week  -0.000339\n",
       "2   spend_last_month  -0.000290\n",
       "3       premium_user  -0.000271\n",
       "4     urban_resident  -0.000030"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>shap_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tenure_months</td>\n",
       "      <td>0.000929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>avg_sessions_week</td>\n",
       "      <td>-0.000339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>spend_last_month</td>\n",
       "      <td>-0.000290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>premium_user</td>\n",
       "      <td>-0.000271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>urban_resident</td>\n",
       "      <td>-0.000030</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 6
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "### Outcome",
   "id": "735d2a5a60aa75be"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T10:31:26.103883Z",
     "start_time": "2025-08-16T10:31:23.021997Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# The OutcomeModel encapsulates outcome predictions and provides diagnostic methods\n",
    "outcome_model = eda.outcome_fit()\n",
    "\n",
    "# 1) Regression scores - shows how well we can predict the outcome from confounders only\n",
    "print(outcome_model.scores)\n",
    "\n",
    "\n",
    "# 2) SHAP values - feature importance for outcome prediction from confounders\n",
    "shap_outcome_df = outcome_model.shap\n",
    "display(shap_outcome_df)"
   ],
   "id": "552711b4aaa3715f",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'rmse': 3.7652134139034956, 'mae': 3.0068231531256497}\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "             feature  shap_mean\n",
       "0      tenure_months   0.003588\n",
       "1  avg_sessions_week  -0.002121\n",
       "2       premium_user  -0.001632\n",
       "3     urban_resident   0.000613\n",
       "4   spend_last_month  -0.000448"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>shap_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tenure_months</td>\n",
       "      <td>0.003588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>avg_sessions_week</td>\n",
       "      <td>-0.002121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>premium_user</td>\n",
       "      <td>-0.001632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>urban_resident</td>\n",
       "      <td>0.000613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>spend_last_month</td>\n",
       "      <td>-0.000448</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 18
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "## Inference",
   "id": "6bb04960515eddb9"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T10:28:14.724084Z",
     "start_time": "2025-08-16T10:28:14.432449Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Import inference methods\n",
    "from causalkit.inference.ate import dml_ate\n",
    "from causalkit.inference.att import dml_att\n",
    "\n",
    "# Estimate Average Treatment Effect (ATE)\n",
    "print(\"=== ORIGINAL CAUSAL ESTIMATES ===\")\n",
    "ate_result = dml_ate(causal_data, n_folds=3, confidence_level=0.95)\n",
    "print(f\"ATE Estimate: {ate_result['coefficient']:.3f}\")\n",
    "print(f\"ATE 95% CI: [{ate_result['confidence_interval'][0]:.3f}, {ate_result['confidence_interval'][1]:.3f}]\")\n",
    "print(f\"ATE p-value: {ate_result['p_value']:.6f}\")\n",
    "print(f\"True effect: {gen.theta:.3f}\")\n",
    "\n"
   ],
   "id": "1903be665fae92e5",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== ORIGINAL CAUSAL ESTIMATES ===\n",
      "ATE Estimate: 1.849\n",
      "ATE 95% CI: [1.615, 2.084]\n",
      "ATE p-value: 0.000000\n",
      "True effect: 1.800\n"
     ]
    }
   ],
   "execution_count": 11
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "## Refutation",
   "id": "d480fb40315a1482"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T10:28:14.729647Z",
     "start_time": "2025-08-16T10:28:14.726454Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Import refutation utilities\n",
    "from causalkit.refutation import (\n",
    "    refute_placebo_outcome,\n",
    "    refute_placebo_treatment,\n",
    "    refute_subset,\n",
    ")\n"
   ],
   "id": "b1ea9f3ac405ad32",
   "outputs": [],
   "execution_count": 12
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T10:28:15.248494Z",
     "start_time": "2025-08-16T10:28:14.731776Z"
    }
   },
   "cell_type": "code",
   "source": [
    "print(\"--- Placebo Outcome Test ---\")\n",
    "print(\"Shuffling outcome variable (breaking outcome-treatment link)\")\n",
    "print(\"Expected: θ ≈ 0, large p-value\\n\")\n",
    "\n",
    "# Test with ATE estimator\n",
    "ate_placebo_outcome = refute_placebo_outcome(\n",
    "    dml_ate,\n",
    "    causal_data,\n",
    "    random_state=42\n",
    ")\n",
    "\n",
    "print(f\"ATE with shuffled outcome:\")\n",
    "print(f\"  θ = {ate_placebo_outcome['theta']:.4f}\")\n",
    "print(f\"  p-value = {ate_placebo_outcome['p_value']:.4f}\")\n",
    "\n"
   ],
   "id": "eb5f75c616754927",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Placebo Outcome Test ---\n",
      "Shuffling outcome variable (breaking outcome-treatment link)\n",
      "Expected: θ ≈ 0, large p-value\n",
      "\n",
      "ATE with shuffled outcome:\n",
      "  θ = -0.0046\n",
      "  p-value = 0.4901\n"
     ]
    }
   ],
   "execution_count": 13
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T10:28:15.768095Z",
     "start_time": "2025-08-16T10:28:15.251298Z"
    }
   },
   "cell_type": "code",
   "source": [
    "print(\"\\n--- Placebo Treatment Test ---\")\n",
    "print(\"Shuffling treatment variable (breaking treatment-outcome link)\")\n",
    "print(\"Expected: θ ≈ 0, large p-value\\n\")\n",
    "\n",
    "# Test with ATE estimator\n",
    "ate_placebo_treatment = refute_placebo_treatment(\n",
    "    dml_ate,\n",
    "    causal_data,\n",
    "    random_state=42\n",
    ")\n",
    "\n",
    "print(f\"ATE with shuffled treatment:\")\n",
    "print(f\"  θ = {ate_placebo_treatment['theta']:.4f}\")\n",
    "print(f\"  p-value = {ate_placebo_treatment['p_value']:.4f}\")"
   ],
   "id": "fcde73df6227ef75",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Placebo Treatment Test ---\n",
      "Shuffling treatment variable (breaking treatment-outcome link)\n",
      "Expected: θ ≈ 0, large p-value\n",
      "\n",
      "ATE with shuffled treatment:\n",
      "  θ = 0.1105\n",
      "  p-value = 0.3445\n"
     ]
    }
   ],
   "execution_count": 14
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T10:28:17.121903Z",
     "start_time": "2025-08-16T10:28:15.770567Z"
    }
   },
   "cell_type": "code",
   "source": [
    "print(\"\\n--- Subset Robustness Test ---\")\n",
    "print(\"Testing stability on random subsets of data\")\n",
    "print(\"Expected: θ similar to original estimate\\n\")\n",
    "\n",
    "# Test multiple subset sizes\n",
    "subset_fractions = [0.6, 0.8, 0.9]\n",
    "\n",
    "print(\"ATE Subset Tests:\")\n",
    "print(f\"Original ATE: {ate_result['coefficient']:.4f}\")\n",
    "\n",
    "ate_subset_results = []\n",
    "for fraction in subset_fractions:\n",
    "    subset_result = refute_subset(\n",
    "        dml_ate,\n",
    "        causal_data,\n",
    "        fraction=fraction,\n",
    "        random_state=42\n",
    "    )\n",
    "    ate_subset_results.append(subset_result)\n",
    "\n",
    "    print(f\"  {fraction*100:.0f}% subset: θ = {subset_result['theta']:.4f}, p = {subset_result['p_value']:.4f}\")\n"
   ],
   "id": "a86c91985b29fa57",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Subset Robustness Test ---\n",
      "Testing stability on random subsets of data\n",
      "Expected: θ similar to original estimate\n",
      "\n",
      "ATE Subset Tests:\n",
      "Original ATE: 1.8494\n",
      "  60% subset: θ = 1.7803, p = 0.0000\n",
      "  80% subset: θ = 1.8781, p = 0.0000\n",
      "  90% subset: θ = 1.7714, p = 0.0000\n"
     ]
    }
   ],
   "execution_count": 15
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T10:28:17.131742Z",
     "start_time": "2025-08-16T10:28:17.130291Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Import sensitivity analysis functions\n",
    "from causalkit.refutation import sensitivity_analysis, get_sensitivity_summary"
   ],
   "id": "5110b76d9e021e5",
   "outputs": [],
   "execution_count": 16
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T10:28:17.142020Z",
     "start_time": "2025-08-16T10:28:17.134028Z"
    }
   },
   "cell_type": "code",
   "source": [
    "print(\"--- Basic Sensitivity Analysis ---\")\n",
    "print(\"Testing robustness to unobserved confounding\\n\")\n",
    "\n",
    "# Perform sensitivity analysis with moderate confounding assumptions\n",
    "print(\"Scenario 1: Moderate unobserved confounding\")\n",
    "print(\"cf_y=0.03 (outcome confounding), cf_d=0.03 (treatment confounding)\")\n",
    "\n",
    "try:\n",
    "    # Run sensitivity analysis on our ATE result\n",
    "    sensitivity_report_1 = sensitivity_analysis(\n",
    "        ate_result,\n",
    "        cf_y=0.03,  # Confounding strength affecting outcome\n",
    "        cf_d=0.03,  # Confounding strength affecting treatment\n",
    "        rho=1.0     # Perfect correlation between unobserved confounders\n",
    "    )\n",
    "\n",
    "    print(sensitivity_report_1)\n",
    "\n",
    "except Exception as e:\n",
    "    print(f\"Note: Sensitivity analysis requires the model object to support it.\")\n",
    "    print(f\"Error: {e}\")\n",
    "    print(\"\\nThis feature works best with DoubleML models that have sensitivity analysis capabilities.\")"
   ],
   "id": "58031e0e0d5b89e6",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Basic Sensitivity Analysis ---\n",
      "Testing robustness to unobserved confounding\n",
      "\n",
      "Scenario 1: Moderate unobserved confounding\n",
      "cf_y=0.03 (outcome confounding), cf_d=0.03 (treatment confounding)\n",
      "================== Sensitivity Analysis ==================\n",
      "\n",
      "------------------ Scenario          ------------------\n",
      "Significance Level: level=0.95\n",
      "Sensitivity parameters: cf_y=0.03; cf_d=0.03, rho=1.0\n",
      "\n",
      "------------------ Bounds with CI    ------------------\n",
      "   CI lower  theta lower    theta  theta upper  CI upper\n",
      "t  1.410706     1.607674  1.84936     2.091046  2.287668\n",
      "\n",
      "------------------ Robustness Values ------------------\n",
      "   H_0     RV (%)    RVa (%)\n",
      "t  0.0  20.749473  18.725578\n"
     ]
    }
   ],
   "execution_count": 17
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-16T10:28:17.151484Z",
     "start_time": "2025-08-16T10:28:17.150264Z"
    }
   },
   "cell_type": "code",
   "source": "",
   "id": "d48c179fbaec8c9d",
   "outputs": [],
   "execution_count": null
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
