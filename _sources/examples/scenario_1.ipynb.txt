{
 "cells": [
  {
   "metadata": {
    "collapsed": true
   },
   "cell_type": "markdown",
   "source": "# Scenario 1",
   "id": "8fcc272d63fa7879"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": [
    "| Is RCT        | Treatment | Outcome    | EDA | Estimands | Refutation | Docs, Examples | Synthetic tests |\n",
    "|---------------|-----------|------------|-----|-----------|------------|----------------|-----------------|\n",
    "| Observational | Binary    | Continuous | No  | No        | No         | No             | No              |"
   ],
   "id": "a636362b8fad6e7b"
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "## Generate data",
   "id": "889d566926f81af1"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:05.943310Z",
     "start_time": "2025-08-15T17:58:05.925622Z"
    }
   },
   "cell_type": "code",
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from causalkit.data import CausalDatasetGenerator, CausalData\n",
    "\n",
    "# Reproducibility\n",
    "np.random.seed(42)\n",
    "\n",
    "confounder_specs = [\n",
    "    {\"name\": \"tenure_months\", \"dist\": \"normal\", \"mu\": 24, \"sd\": 12},\n",
    "    {\"name\": \"avg_sessions_week\", \"dist\": \"normal\", \"mu\": 5, \"sd\": 2},\n",
    "    {\"name\": \"spend_last_month\", \"dist\": \"uniform\", \"a\": 0, \"b\": 200},\n",
    "    {\"name\": \"premium_user\", \"dist\": \"bernoulli\", \"p\": 0.25},\n",
    "    {\"name\": \"urban_resident\", \"dist\": \"bernoulli\", \"p\": 0.60},\n",
    "]\n",
    "\n",
    "# Causal effect and noise\n",
    "theta = 1.8  # ATE: +1.8 ARPU units if new_feature = 1\n",
    "sigma_y = 3.5  # ARPU noise std\n",
    "target_t_rate = 0.35  # ~35% treated\n",
    "\n",
    "# Effects of confounders on ARPU (baseline, additive)\n",
    "# Order: tenure_months, avg_sessions_week, spend_last_month, premium_user, urban_resident\n",
    "beta_y = np.array([\n",
    "    0.05,  # tenure_months: small positive effect\n",
    "    0.40,  # avg_sessions_week: strong positive effect\n",
    "    0.02,  # spend_last_month: recent spend correlates with ARPU\n",
    "    2.00,  # premium_user: premium users have higher ARPU\n",
    "    1.00,  # urban_resident: urban users slightly higher ARPU\n",
    "], dtype=float)\n",
    "\n",
    "# Effects of confounders on treatment assignment (log-odds scale)\n",
    "beta_t = np.array([\n",
    "    0.015,  # tenure_months\n",
    "    0.10,  # avg_sessions_week\n",
    "    0.002,  # spend_last_month\n",
    "    0.75,  # premium_user\n",
    "    0.30,  # urban_resident: more likely to get the feature\n",
    "], dtype=float)\n",
    "\n",
    "gen = CausalDatasetGenerator(\n",
    "    theta=theta,\n",
    "    outcome_type=\"continuous\",\n",
    "    sigma_y=sigma_y,\n",
    "    target_t_rate=target_t_rate,\n",
    "    seed=42,\n",
    "    confounder_specs=confounder_specs,\n",
    "    beta_y=beta_y,\n",
    "    beta_t=beta_t,\n",
    ")\n",
    "\n",
    "\n",
    "# Create dataset\n",
    "causal_data = gen.to_causal_data(\n",
    "    n=5000,\n",
    "    cofounders = [\n",
    "    \"tenure_months\",\n",
    "    \"avg_sessions_week\",\n",
    "    \"spend_last_month\",\n",
    "    \"premium_user\",\n",
    "    \"urban_resident\",\n",
    "]\n",
    ")\n",
    "\n",
    "print(f\"Generated {len(causal_data.df)} observations\")\n",
    "print(f\"True causal effect: {gen.theta}\")\n",
    "print(f\"Treatment rate: {causal_data.df['t'].mean():.1%}\")\n",
    "print(f\"Average outcome: {causal_data.df['y'].mean():.2f}\")\n",
    "\n",
    "# Show first few rows\n",
    "causal_data.df.head()\n"
   ],
   "id": "5df3d791f8395962",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generated 5000 observations\n",
      "True causal effect: 1.8\n",
      "Treatment rate: 34.1%\n",
      "Average outcome: 6.88\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "          y    t  tenure_months  avg_sessions_week  spend_last_month  \\\n",
       "0  9.001966  0.0      27.656605           4.484096        156.289662   \n",
       "1  8.253476  0.0      11.520191           4.401028         49.867370   \n",
       "2  7.996043  1.0      33.005414           3.606680        164.168275   \n",
       "3  8.347067  0.0      35.286777           5.856966         35.426710   \n",
       "4  5.505211  1.0       0.587578           5.469292         71.894705   \n",
       "\n",
       "   premium_user  urban_resident  \n",
       "0           0.0             1.0  \n",
       "1           1.0             0.0  \n",
       "2           0.0             1.0  \n",
       "3           0.0             0.0  \n",
       "4           0.0             0.0  "
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y</th>\n",
       "      <th>t</th>\n",
       "      <th>tenure_months</th>\n",
       "      <th>avg_sessions_week</th>\n",
       "      <th>spend_last_month</th>\n",
       "      <th>premium_user</th>\n",
       "      <th>urban_resident</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9.001966</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27.656605</td>\n",
       "      <td>4.484096</td>\n",
       "      <td>156.289662</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8.253476</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.520191</td>\n",
       "      <td>4.401028</td>\n",
       "      <td>49.867370</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.996043</td>\n",
       "      <td>1.0</td>\n",
       "      <td>33.005414</td>\n",
       "      <td>3.606680</td>\n",
       "      <td>164.168275</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.347067</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.286777</td>\n",
       "      <td>5.856966</td>\n",
       "      <td>35.426710</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.505211</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.587578</td>\n",
       "      <td>5.469292</td>\n",
       "      <td>71.894705</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 9
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "## EDA\n",
   "id": "5e37434a3725215a"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:05.964858Z",
     "start_time": "2025-08-15T17:58:05.963411Z"
    }
   },
   "cell_type": "code",
   "source": "from causalkit.eda import CausalEDA\n",
   "id": "afd5e60494139b52",
   "outputs": [],
   "execution_count": 10
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:05.989622Z",
     "start_time": "2025-08-15T17:58:05.987202Z"
    }
   },
   "cell_type": "code",
   "source": "eda = CausalEDA(causal_data)",
   "id": "9dce25a23fd90ed",
   "outputs": [],
   "execution_count": 11
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:06.003867Z",
     "start_time": "2025-08-15T17:58:05.999705Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 1) Simple outcome/treatment summaries\n",
    "summ = eda.summaries()\n",
    "print(\"Share treated:\", round(float(summ[\"treatment_rate\"]), 4))\n",
    "print(\"Naive diff (treated - control):\",\n",
    "      round(float(summ[\"naive_diff\"]), 4) if pd.notna(summ[\"naive_diff\"]) else summ[\"naive_diff\"])\n",
    "\n",
    "print(\"\\nOutcome by treatment:\")\n",
    "display(summ[\"outcome_by_treatment\"])"
   ],
   "id": "7e44610653b25c01",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Share treated: 0.3412\n",
      "Naive diff (treated - control): 2.4398\n",
      "\n",
      "Outcome by treatment:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "     count      mean       std\n",
       "t                             \n",
       "0.0   3294  6.049281  3.961794\n",
       "1.0   1706  8.489068  3.937085"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>t</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0</th>\n",
       "      <td>3294</td>\n",
       "      <td>6.049281</td>\n",
       "      <td>3.961794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0</th>\n",
       "      <td>1706</td>\n",
       "      <td>8.489068</td>\n",
       "      <td>3.937085</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 12
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:06.010752Z",
     "start_time": "2025-08-15T17:58:06.008401Z"
    }
   },
   "cell_type": "code",
   "source": "summ",
   "id": "528aa1a6c6a42f06",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'treatment_rate': np.float64(0.3412),\n",
       " 'outcome_by_treatment':      count      mean       std\n",
       " t                             \n",
       " 0.0   3294  6.049281  3.961794\n",
       " 1.0   1706  8.489068  3.937085,\n",
       " 'naive_diff': np.float64(2.4397874992846997)}"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 13
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:10.679397Z",
     "start_time": "2025-08-15T17:58:06.036082Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Propensity, predictability (AUC), and positivity\n",
    "ps = eda.fit_propensity()\n",
    "auc = eda.treatment_predictability_auc(ps)\n",
    "pos = eda.positivity_check(ps)\n",
    "\n",
    "print(\"Treatment predictability AUC:\", round(auc, 4))\n",
    "print(\"Positivity check:\", pos)"
   ],
   "id": "9e0bf5072cf68793",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Treatment predictability AUC: 0.5964\n",
      "Positivity check: {'bounds': (0.05, 0.95), 'share_below': 0.002, 'share_above': 0.0, 'flag': False}\n"
     ]
    }
   ],
   "execution_count": 14
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:10.891471Z",
     "start_time": "2025-08-15T17:58:10.696181Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Treatment feature importance (which features drive treatment assignment)\n",
    "features_df = eda.treatment_features()\n",
    "print(\"Feature importance for treatment prediction:\")\n",
    "display(features_df)"
   ],
   "id": "45823a81e59194ff",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature importance for treatment prediction:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "             feature  shap_mean\n",
       "0      tenure_months   0.000929\n",
       "1  avg_sessions_week  -0.000339\n",
       "2   spend_last_month  -0.000290\n",
       "3       premium_user  -0.000271\n",
       "4     urban_resident  -0.000030"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>shap_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tenure_months</td>\n",
       "      <td>0.000929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>avg_sessions_week</td>\n",
       "      <td>-0.000339</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>spend_last_month</td>\n",
       "      <td>-0.000290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>premium_user</td>\n",
       "      <td>-0.000271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>urban_resident</td>\n",
       "      <td>-0.000030</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 15
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:10.919811Z",
     "start_time": "2025-08-15T17:58:10.914961Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 3) Balance diagnostics (SMD) for covariate assessment\n",
    "balance_df = eda.balance_table()\n",
    "display(balance_df.head(20))"
   ],
   "id": "cd73beb222d6f286",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "           covariate       SMD\n",
       "3       premium_user  0.329364\n",
       "1  avg_sessions_week  0.198836\n",
       "0      tenure_months  0.172035\n",
       "4     urban_resident  0.100418\n",
       "2   spend_last_month  0.080595"
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>covariate</th>\n",
       "      <th>SMD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>premium_user</td>\n",
       "      <td>0.329364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>avg_sessions_week</td>\n",
       "      <td>0.198836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>tenure_months</td>\n",
       "      <td>0.172035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>urban_resident</td>\n",
       "      <td>0.100418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>spend_last_month</td>\n",
       "      <td>0.080595</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 16
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:11.022517Z",
     "start_time": "2025-08-15T17:58:10.942524Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 4) Propensity score overlap\n",
    "# Overlap plot (treated vs control propensity distributions)\n",
    "eda.plot_ps_overlap(ps)\n",
    "plt.show()"
   ],
   "id": "a6a320582574bb57",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 17
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:11.112429Z",
     "start_time": "2025-08-15T17:58:11.031567Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 5) Outcome distribution by treatment (hist + boxplot)\n",
    "fig1, fig2 = eda.plot_target_by_treatment()\n",
    "plt.show()"
   ],
   "id": "226adde85b5328f7",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 700x400 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 700x400 with 1 Axes>"
      ],
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 18
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:15.722945Z",
     "start_time": "2025-08-15T17:58:11.118898Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# 5) One-shot consolidated report (if you prefer a single call)\n",
    "report = eda.design_report()\n",
    "# Example: access parts\n",
    "print(\"AUC:\", report[\"treat_auc\"])\n",
    "print(\"Positivity:\", report[\"positivity\"])\n",
    "print(\"Balance variables:\", len(report[\"balance\"]))"
   ],
   "id": "b4bfa8823f8288b1",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC: 0.5964160208870297\n",
      "Positivity: {'bounds': (0.05, 0.95), 'share_below': 0.002, 'share_above': 0.0, 'flag': False}\n",
      "Balance variables: 5\n"
     ]
    }
   ],
   "execution_count": 19
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:15.738475Z",
     "start_time": "2025-08-15T17:58:15.736035Z"
    }
   },
   "cell_type": "code",
   "source": "report",
   "id": "1a5a9c4d0db1650f",
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'summaries': {'treatment_rate': np.float64(0.3412),\n",
       "  'outcome_by_treatment':      count      mean       std\n",
       "  t                             \n",
       "  0.0   3294  6.049281  3.961794\n",
       "  1.0   1706  8.489068  3.937085,\n",
       "  'naive_diff': np.float64(2.4397874992846997)},\n",
       " 'treat_auc': 0.5964160208870297,\n",
       " 'positivity': {'bounds': (0.05, 0.95),\n",
       "  'share_below': 0.002,\n",
       "  'share_above': 0.0,\n",
       "  'flag': False},\n",
       " 'balance':            covariate       SMD\n",
       " 3       premium_user  0.329364\n",
       " 1  avg_sessions_week  0.198836\n",
       " 0      tenure_months  0.172035\n",
       " 4     urban_resident  0.100418\n",
       " 2   spend_last_month  0.080595}"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 20
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T18:00:22.389325Z",
     "start_time": "2025-08-15T18:00:17.726232Z"
    }
   },
   "cell_type": "code",
   "source": [
    "print(\"=== DIRECT CHAINING EXAMPLE ===\")\n",
    "print(eda.design_report().summary())"
   ],
   "id": "8a82ada25fa0a88a",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== DIRECT CHAINING EXAMPLE ===\n",
      "============================================================\n",
      "CAUSAL DESIGN REPORT SUMMARY\n",
      "============================================================\n",
      "\n",
      "📊 TREATMENT & OUTCOME SUMMARY\n",
      "------------------------------\n",
      "Treatment Rate: 34.1%\n",
      "Naive Difference (Treated - Control): 2.4398\n",
      "\n",
      "Outcome by Treatment:\n",
      "     count    mean     std\n",
      "t                         \n",
      "0.0   3294  6.0493  3.9618\n",
      "1.0   1706  8.4891  3.9371\n",
      "\n",
      "🎯 TREATMENT PREDICTABILITY\n",
      "------------------------------\n",
      "Treatment AUC: 0.5964\n",
      "  ✅ Low predictability - minimal confounding risk\n",
      "\n",
      "🔄 POSITIVITY/OVERLAP ASSESSMENT\n",
      "------------------------------\n",
      "Propensity Score Bounds: (0.05, 0.95)\n",
      "Share Below Lower Bound: 0.2%\n",
      "Share Above Upper Bound: 0.0%\n",
      "Total in Extreme Regions: 0.2%\n",
      "  ✅ Good overlap - positivity assumption satisfied\n",
      "\n",
      "⚖️  COVARIATE BALANCE ASSESSMENT\n",
      "------------------------------\n",
      "Total Variables: 5\n",
      "Imbalanced Variables: 4\n",
      "  ⚠️  Poor balance - many imbalanced variables\n",
      "\n",
      "Most Imbalanced Variables:\n",
      "  premium_user: 0.329\n",
      "  avg_sessions_week: 0.199\n",
      "  tenure_months: 0.172\n",
      "\n",
      "📋 OVERALL ASSESSMENT\n",
      "------------------------------\n",
      "⚠️  Design has potential issues:\n",
      "   - Poor covariate balance\n",
      "   Consider additional robustness checks or sensitivity analysis.\n",
      "============================================================\n"
     ]
    }
   ],
   "execution_count": 28
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "## Inference",
   "id": "cb524d151319c401"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:16.037210Z",
     "start_time": "2025-08-15T17:58:15.745514Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Import inference methods\n",
    "from causalkit.inference.ate import dml_ate\n",
    "from causalkit.inference.att import dml_att\n",
    "\n",
    "# Estimate Average Treatment Effect (ATE)\n",
    "print(\"=== ORIGINAL CAUSAL ESTIMATES ===\")\n",
    "ate_result = dml_ate(causal_data, n_folds=3, confidence_level=0.95)\n",
    "print(f\"ATE Estimate: {ate_result['coefficient']:.3f}\")\n",
    "print(f\"ATE 95% CI: [{ate_result['confidence_interval'][0]:.3f}, {ate_result['confidence_interval'][1]:.3f}]\")\n",
    "print(f\"ATE p-value: {ate_result['p_value']:.6f}\")\n",
    "print(f\"True effect: {gen.theta:.3f}\")\n",
    "\n"
   ],
   "id": "1903be665fae92e5",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== ORIGINAL CAUSAL ESTIMATES ===\n",
      "ATE Estimate: 1.849\n",
      "ATE 95% CI: [1.615, 2.084]\n",
      "ATE p-value: 0.000000\n",
      "True effect: 1.800\n"
     ]
    }
   ],
   "execution_count": 21
  },
  {
   "metadata": {},
   "cell_type": "markdown",
   "source": "## Refutation",
   "id": "d480fb40315a1482"
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:16.042402Z",
     "start_time": "2025-08-15T17:58:16.039182Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Import refutation utilities\n",
    "from causalkit.refutation import (\n",
    "    refute_placebo_outcome,\n",
    "    refute_placebo_treatment,\n",
    "    refute_subset,\n",
    ")\n"
   ],
   "id": "b1ea9f3ac405ad32",
   "outputs": [],
   "execution_count": 22
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:16.560638Z",
     "start_time": "2025-08-15T17:58:16.044384Z"
    }
   },
   "cell_type": "code",
   "source": [
    "print(\"--- Placebo Outcome Test ---\")\n",
    "print(\"Shuffling outcome variable (breaking outcome-treatment link)\")\n",
    "print(\"Expected: θ ≈ 0, large p-value\\n\")\n",
    "\n",
    "# Test with ATE estimator\n",
    "ate_placebo_outcome = refute_placebo_outcome(\n",
    "    dml_ate,\n",
    "    causal_data,\n",
    "    random_state=42\n",
    ")\n",
    "\n",
    "print(f\"ATE with shuffled outcome:\")\n",
    "print(f\"  θ = {ate_placebo_outcome['theta']:.4f}\")\n",
    "print(f\"  p-value = {ate_placebo_outcome['p_value']:.4f}\")\n",
    "\n"
   ],
   "id": "eb5f75c616754927",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Placebo Outcome Test ---\n",
      "Shuffling outcome variable (breaking outcome-treatment link)\n",
      "Expected: θ ≈ 0, large p-value\n",
      "\n",
      "ATE with shuffled outcome:\n",
      "  θ = -0.0046\n",
      "  p-value = 0.4901\n"
     ]
    }
   ],
   "execution_count": 23
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:17.148924Z",
     "start_time": "2025-08-15T17:58:16.562957Z"
    }
   },
   "cell_type": "code",
   "source": [
    "print(\"\\n--- Placebo Treatment Test ---\")\n",
    "print(\"Shuffling treatment variable (breaking treatment-outcome link)\")\n",
    "print(\"Expected: θ ≈ 0, large p-value\\n\")\n",
    "\n",
    "# Test with ATE estimator\n",
    "ate_placebo_treatment = refute_placebo_treatment(\n",
    "    dml_ate,\n",
    "    causal_data,\n",
    "    random_state=42\n",
    ")\n",
    "\n",
    "print(f\"ATE with shuffled treatment:\")\n",
    "print(f\"  θ = {ate_placebo_treatment['theta']:.4f}\")\n",
    "print(f\"  p-value = {ate_placebo_treatment['p_value']:.4f}\")"
   ],
   "id": "fcde73df6227ef75",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Placebo Treatment Test ---\n",
      "Shuffling treatment variable (breaking treatment-outcome link)\n",
      "Expected: θ ≈ 0, large p-value\n",
      "\n",
      "ATE with shuffled treatment:\n",
      "  θ = 0.1105\n",
      "  p-value = 0.3445\n"
     ]
    }
   ],
   "execution_count": 24
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:18.538183Z",
     "start_time": "2025-08-15T17:58:17.168034Z"
    }
   },
   "cell_type": "code",
   "source": [
    "print(\"\\n--- Subset Robustness Test ---\")\n",
    "print(\"Testing stability on random subsets of data\")\n",
    "print(\"Expected: θ similar to original estimate\\n\")\n",
    "\n",
    "# Test multiple subset sizes\n",
    "subset_fractions = [0.6, 0.8, 0.9]\n",
    "\n",
    "print(\"ATE Subset Tests:\")\n",
    "print(f\"Original ATE: {ate_result['coefficient']:.4f}\")\n",
    "\n",
    "ate_subset_results = []\n",
    "for fraction in subset_fractions:\n",
    "    subset_result = refute_subset(\n",
    "        dml_ate,\n",
    "        causal_data,\n",
    "        fraction=fraction,\n",
    "        random_state=42\n",
    "    )\n",
    "    ate_subset_results.append(subset_result)\n",
    "\n",
    "    print(f\"  {fraction*100:.0f}% subset: θ = {subset_result['theta']:.4f}, p = {subset_result['p_value']:.4f}\")\n"
   ],
   "id": "a86c91985b29fa57",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Subset Robustness Test ---\n",
      "Testing stability on random subsets of data\n",
      "Expected: θ similar to original estimate\n",
      "\n",
      "ATE Subset Tests:\n",
      "Original ATE: 1.8494\n",
      "  60% subset: θ = 1.7803, p = 0.0000\n",
      "  80% subset: θ = 1.8781, p = 0.0000\n",
      "  90% subset: θ = 1.7714, p = 0.0000\n"
     ]
    }
   ],
   "execution_count": 25
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:18.548178Z",
     "start_time": "2025-08-15T17:58:18.546585Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Import sensitivity analysis functions\n",
    "from causalkit.refutation import sensitivity_analysis, get_sensitivity_summary"
   ],
   "id": "5110b76d9e021e5",
   "outputs": [],
   "execution_count": 26
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:18.556321Z",
     "start_time": "2025-08-15T17:58:18.549965Z"
    }
   },
   "cell_type": "code",
   "source": [
    "print(\"--- Basic Sensitivity Analysis ---\")\n",
    "print(\"Testing robustness to unobserved confounding\\n\")\n",
    "\n",
    "# Perform sensitivity analysis with moderate confounding assumptions\n",
    "print(\"Scenario 1: Moderate unobserved confounding\")\n",
    "print(\"cf_y=0.03 (outcome confounding), cf_d=0.03 (treatment confounding)\")\n",
    "\n",
    "try:\n",
    "    # Run sensitivity analysis on our ATE result\n",
    "    sensitivity_report_1 = sensitivity_analysis(\n",
    "        ate_result,\n",
    "        cf_y=0.03,  # Confounding strength affecting outcome\n",
    "        cf_d=0.03,  # Confounding strength affecting treatment\n",
    "        rho=1.0     # Perfect correlation between unobserved confounders\n",
    "    )\n",
    "\n",
    "    print(sensitivity_report_1)\n",
    "\n",
    "except Exception as e:\n",
    "    print(f\"Note: Sensitivity analysis requires the model object to support it.\")\n",
    "    print(f\"Error: {e}\")\n",
    "    print(\"\\nThis feature works best with DoubleML models that have sensitivity analysis capabilities.\")"
   ],
   "id": "58031e0e0d5b89e6",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--- Basic Sensitivity Analysis ---\n",
      "Testing robustness to unobserved confounding\n",
      "\n",
      "Scenario 1: Moderate unobserved confounding\n",
      "cf_y=0.03 (outcome confounding), cf_d=0.03 (treatment confounding)\n",
      "================== Sensitivity Analysis ==================\n",
      "\n",
      "------------------ Scenario          ------------------\n",
      "Significance Level: level=0.95\n",
      "Sensitivity parameters: cf_y=0.03; cf_d=0.03, rho=1.0\n",
      "\n",
      "------------------ Bounds with CI    ------------------\n",
      "   CI lower  theta lower    theta  theta upper  CI upper\n",
      "t  1.410706     1.607674  1.84936     2.091046  2.287668\n",
      "\n",
      "------------------ Robustness Values ------------------\n",
      "   H_0     RV (%)    RVa (%)\n",
      "t  0.0  20.749473  18.725578\n"
     ]
    }
   ],
   "execution_count": 27
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T17:58:18.564386Z",
     "start_time": "2025-08-15T17:58:18.563233Z"
    }
   },
   "cell_type": "code",
   "source": "",
   "id": "d48c179fbaec8c9d",
   "outputs": [],
   "execution_count": null
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
