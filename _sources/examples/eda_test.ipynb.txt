{
 "cells": [
  {
   "cell_type": "code",
   "id": "initial_id",
   "metadata": {
    "collapsed": true,
    "ExecuteTime": {
     "end_time": "2025-08-15T16:12:23.742642Z",
     "start_time": "2025-08-15T16:12:23.073132Z"
    }
   },
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from causalkit.data import CausalDatasetGenerator, CausalData\n",
    "\n",
    "# Reproducibility\n",
    "np.random.seed(42)\n",
    "\n",
    "confounder_specs = [\n",
    "    {\"name\": \"tenure_months\", \"dist\": \"normal\", \"mu\": 24, \"sd\": 12},\n",
    "    {\"name\": \"avg_sessions_week\", \"dist\": \"normal\", \"mu\": 5, \"sd\": 2},\n",
    "    {\"name\": \"spend_last_month\", \"dist\": \"uniform\", \"a\": 0, \"b\": 200},\n",
    "    {\"name\": \"premium_user\", \"dist\": \"bernoulli\", \"p\": 0.25},\n",
    "    {\"name\": \"urban_resident\", \"dist\": \"bernoulli\", \"p\": 0.60},\n",
    "]\n",
    "\n",
    "# Causal effect and noise\n",
    "theta = 1.8  # ATE: +1.8 ARPU units if new_feature = 1\n",
    "sigma_y = 3.5  # ARPU noise std\n",
    "target_t_rate = 0.35  # ~35% treated\n",
    "\n",
    "# Effects of confounders on ARPU (baseline, additive)\n",
    "# Order: tenure_months, avg_sessions_week, spend_last_month, premium_user, urban_resident\n",
    "beta_y = np.array([\n",
    "    0.05,  # tenure_months: small positive effect\n",
    "    0.40,  # avg_sessions_week: strong positive effect\n",
    "    0.02,  # spend_last_month: recent spend correlates with ARPU\n",
    "    2.00,  # premium_user: premium users have higher ARPU\n",
    "    1.00,  # urban_resident: urban users slightly higher ARPU\n",
    "], dtype=float)\n",
    "\n",
    "# Effects of confounders on treatment assignment (log-odds scale)\n",
    "beta_t = np.array([\n",
    "    0.015,  # tenure_months\n",
    "    0.10,  # avg_sessions_week\n",
    "    0.002,  # spend_last_month\n",
    "    0.75,  # premium_user\n",
    "    0.30,  # urban_resident: more likely to get the feature\n",
    "], dtype=float)\n",
    "\n",
    "gen = CausalDatasetGenerator(\n",
    "    theta=theta,\n",
    "    outcome_type=\"continuous\",\n",
    "    sigma_y=sigma_y,\n",
    "    target_t_rate=target_t_rate,\n",
    "    seed=42,\n",
    "    confounder_specs=confounder_specs,\n",
    "    beta_y=beta_y,\n",
    "    beta_t=beta_t,\n",
    ")\n",
    "\n",
    "\n",
    "# Create dataset\n",
    "causal_data = gen.to_causal_data(\n",
    "    n=5000,\n",
    "    cofounders = [\n",
    "    \"tenure_months\",\n",
    "    \"avg_sessions_week\",\n",
    "    \"spend_last_month\",\n",
    "    \"premium_user\",\n",
    "    \"urban_resident\",\n",
    "]\n",
    ")\n",
    "\n",
    "print(f\"Generated {len(causal_data.df)} observations\")\n",
    "print(f\"True causal effect: {gen.theta}\")\n",
    "print(f\"Treatment rate: {causal_data.df['t'].mean():.1%}\")\n",
    "print(f\"Average outcome: {causal_data.df['y'].mean():.2f}\")\n",
    "\n",
    "# Show first few rows\n",
    "causal_data.df.head()\n"
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generated 5000 observations\n",
      "True causal effect: 1.8\n",
      "Treatment rate: 34.1%\n",
      "Average outcome: 6.88\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "          y    t  tenure_months  avg_sessions_week  spend_last_month  \\\n",
       "0  9.001966  0.0      27.656605           4.484096        156.289662   \n",
       "1  8.253476  0.0      11.520191           4.401028         49.867370   \n",
       "2  7.996043  1.0      33.005414           3.606680        164.168275   \n",
       "3  8.347067  0.0      35.286777           5.856966         35.426710   \n",
       "4  5.505211  1.0       0.587578           5.469292         71.894705   \n",
       "\n",
       "   premium_user  urban_resident  \n",
       "0           0.0             1.0  \n",
       "1           1.0             0.0  \n",
       "2           0.0             1.0  \n",
       "3           0.0             0.0  \n",
       "4           0.0             0.0  "
      ],
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y</th>\n",
       "      <th>t</th>\n",
       "      <th>tenure_months</th>\n",
       "      <th>avg_sessions_week</th>\n",
       "      <th>spend_last_month</th>\n",
       "      <th>premium_user</th>\n",
       "      <th>urban_resident</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9.001966</td>\n",
       "      <td>0.0</td>\n",
       "      <td>27.656605</td>\n",
       "      <td>4.484096</td>\n",
       "      <td>156.289662</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8.253476</td>\n",
       "      <td>0.0</td>\n",
       "      <td>11.520191</td>\n",
       "      <td>4.401028</td>\n",
       "      <td>49.867370</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7.996043</td>\n",
       "      <td>1.0</td>\n",
       "      <td>33.005414</td>\n",
       "      <td>3.606680</td>\n",
       "      <td>164.168275</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8.347067</td>\n",
       "      <td>0.0</td>\n",
       "      <td>35.286777</td>\n",
       "      <td>5.856966</td>\n",
       "      <td>35.426710</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.505211</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.587578</td>\n",
       "      <td>5.469292</td>\n",
       "      <td>71.894705</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 1
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T16:12:23.768458Z",
     "start_time": "2025-08-15T16:12:23.765324Z"
    }
   },
   "cell_type": "code",
   "source": [
    "from causalkit.eda import CausalEDA\n",
    "eda = CausalEDA(causal_data)"
   ],
   "id": "805129430c3680db",
   "outputs": [],
   "execution_count": 2
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T16:12:23.868912Z",
     "start_time": "2025-08-15T16:12:23.842815Z"
    }
   },
   "cell_type": "code",
   "source": "",
   "id": "7d5cd09ceeb33bfc",
   "outputs": [],
   "execution_count": 3
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T16:12:23.898783Z",
     "start_time": "2025-08-15T16:12:23.895245Z"
    }
   },
   "cell_type": "code",
   "source": [
    "# Example of using the new summary() method for beautiful text output\n",
    "print(\"=== DESIGN REPORT SUMMARY ===\")\n",
    "print(report.summary())"
   ],
   "id": "a35a72932944d70e",
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== DESIGN REPORT SUMMARY ===\n",
      "============================================================\n",
      "CAUSAL DESIGN REPORT SUMMARY\n",
      "============================================================\n",
      "\n",
      "üìä TREATMENT & OUTCOME SUMMARY\n",
      "------------------------------\n",
      "Treatment Rate: 34.1%\n",
      "Naive Difference (Treated - Control): 2.4398\n",
      "\n",
      "Outcome by Treatment:\n",
      "     count    mean     std\n",
      "t                         \n",
      "0.0   3294  6.0493  3.9618\n",
      "1.0   1706  8.4891  3.9371\n",
      "\n",
      "üéØ TREATMENT PREDICTABILITY\n",
      "------------------------------\n",
      "Treatment AUC: 0.6230\n",
      "  ‚úÖ Low predictability - minimal confounding risk\n",
      "\n",
      "üîÑ POSITIVITY/OVERLAP ASSESSMENT\n",
      "------------------------------\n",
      "Propensity Score Bounds: (0.05, 0.95)\n",
      "Share Below Lower Bound: 0.0%\n",
      "Share Above Upper Bound: 0.0%\n",
      "Total in Extreme Regions: 0.0%\n",
      "  ‚úÖ Good overlap - positivity assumption satisfied\n",
      "\n",
      "‚öñÔ∏è  COVARIATE BALANCE ASSESSMENT\n",
      "------------------------------\n",
      "Total Variables: 5\n",
      "Imbalanced Before Weighting: 4\n",
      "Imbalanced After Weighting: 0\n",
      "  ‚úÖ Perfect balance achieved after weighting\n",
      "\n",
      "Worst Imbalanced Variables (Before Weighting):\n",
      "  premium_user: 0.329 ‚Üí -0.001\n",
      "  avg_sessions_week: 0.199 ‚Üí 0.006\n",
      "  tenure_months: 0.172 ‚Üí 0.000\n",
      "\n",
      "‚öñÔ∏è  WEIGHT DIAGNOSTICS\n",
      "------------------------------\n",
      "Effective Sample Size (All): 4209.6\n",
      "Effective Sample Size (Treated): 1567.5\n",
      "Effective Sample Size (Control): 3201.6\n",
      "\n",
      "Weight Distribution (Quantiles):\n",
      "  50%: 1.61\n",
      "  90%: 3.35\n",
      "  95%: 3.84\n",
      "  99%: 4.78\n",
      "  100%: 7.67\n",
      "  ‚úÖ Reasonable weight distribution\n",
      "\n",
      "üìã OVERALL ASSESSMENT\n",
      "------------------------------\n",
      "‚úÖ Design looks good for causal inference!\n",
      "   All key assumptions appear to be satisfied.\n",
      "============================================================\n"
     ]
    }
   ],
   "execution_count": 5
  },
  {
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-08-15T16:12:23.937200Z",
     "start_time": "2025-08-15T16:12:23.935919Z"
    }
   },
   "cell_type": "code",
   "source": "",
   "id": "764c4bc0ac14db89",
   "outputs": [],
   "execution_count": null
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
